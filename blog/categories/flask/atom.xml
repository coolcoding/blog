<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: flask | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/flask/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2014-12-11T18:19:21+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个flask+mongoengine的site]]></title>
    <link href="http://dongweiming.github.com/blog/archives/a-data-analysis-site-by-flask-and-mongoengine/"/>
    <updated>2013-11-20T17:39:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/a-data-analysis-site-by-flask-and-mongoengine</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近一直学习emacs和elisp, 也在做关于mongodb相关的研究,闲来无事就做了个网站,后端使用了flask, mongoengine, 前端css框架用的是
雅虎的<a href="https://github.com/yui/pure">pure</a>, 还是用了神奇的<a href="https://github.com/gruntjs/grunt">grunt</a>做页面修改的livereload, 然后有d3,
jquery, amchart和一个最近发现的页面消息弹出<a href="https://github.com/CodeSeven/toastr">toastr</a>.想学习flask和mongoengine的童鞋可直接拿去,开源地址是
<a href="https://github.com/dongweiming/data-analysis">data-analysis</a></p>

<h4 id="section-1">下载依赖和启动</h4>

<p><code>python
cd /path/to/data-analysis
pip install -r requirements.txt
# 安装grunt
npm install
# 我的后端样例数据
mongorestore -d fetch_data --directoryperdb dump/fetch_data
cd data_analysis
# 启动Grunt
grunt
# 启动
python run.py
# 然后打开 http://Youip:5000
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用http和websocket连接服务器]]></title>
    <link href="http://dongweiming.github.com/blog/archives/shi-yong-httphe-websocketlian-jie-fu-wu-qi/"/>
    <updated>2013-07-19T22:53:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/shi-yong-httphe-websocketlian-jie-fu-wu-qi</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>想想吧，通过网页ssh登录服务器是一件多么酷的事情?今天看了<a href="http://www.vpsee.com/2013/06/invoke-a-linux-shell-with-ssh-account-from-browser">使用浏览器访问 Linux 终端</a>,
也就是这个<a href="https://github.com/dongweiming/wssh">wssh</a>,你也可以理解为websocket-ssh, 觉得有点意思就拿出来</p>

<h4 id="section-1">原路</h4>

<p>它是一个库，很简单，作者写了2个flask+gevent+websocket+paramiko的例子，其中网页版的使用了bootstrap.
简单的理解就是不通过ssh连接服务器，而是通过网页或者一个client请求url+相应参数调用
shell到服务器的方式，但是遗憾的是作者一年没有再维护，bootstrap的网页竟然没有指定ssh端口的选项，但是很多时候为了安全
都会把ssh端口换成其它端口，这样就不能用了,好吧 我动手给它加了这个功能，也提了pull request.目前大家可以用我的这版:<a href="https://github.com/dongweiming/wssh">wssh</a></p>

<h4 id="update"><strong>update</strong></h4>

<p>wssh作者已经合并了我的修改</p>

<h4 id="section-2">使用说明</h4>

<p>当你使用</p>

<p><code>
sudo python setup.py install
</code></p>

<p>安装后，就能直接使用wssh和wsshd,wsshd是一个flask作为httpserver和gevent作为wsgi的服务端，默认启动在你本机的5000端口.
网页登录就能看见简单大气的选项页面，可以指定用户，服务器ip，端口，以及使用密钥或者密码登录.输入点击连接就会登录到那台服务器,数据通过websocket实时显示到页面上</p>

<p>而wssh是一个命令行登录的带选项的命令，其实就是页面输入的参数通过命令行的方式输入然后直接登录服务器，比如我下面的用法:</p>

<p><code>
wssh dongwm@dongwm.com -p XXX -s 58404
</code></p>

<h4 id="section-3">我觉得有空可以基于这个做点好玩的东西</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[仿slid.es的在线PPT编辑网站]]></title>
    <link href="http://dongweiming.github.com/blog/archives/a-web-based-reveal.js-online-PPT/"/>
    <updated>2013-05-25T12:22:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/a-web-based-reveal.js-online-PPT</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p><a href="https://slid.es">slid.es</a>是我最喜欢的前端之一<a href="https://github.com/hakimel">hakimel</a>的作品，前身叫做rvl.io, 网站已经改版。源于去年年底在上家公司做年终总结PPT，对我这种不搞office，没有美感的小程序员太痛苦了，然后就找到了<a href="https://github.com/hakimel/reveal.js">reveal.js</a>, 后来萌发做个基于它的网站, 其实也是为了练手学习mongoengine和oauth</p>

<p>项目地址 <a href="https://github.com/dongweiming/flask_reveal">flask_reveal</a></p>

<h4 id="section-1">它能做什么</h4>

<ul>
  <li>保存漂亮的在线PPT(我认为的)</li>
  <li>记录浏览次数</li>
  <li>多种主题和字体</li>
  <li>可以把PPT私有化(默认是公开的)</li>
  <li>自动保存修改</li>
  <li>支持Bitbucket/Google/Github/Instagram/Linkdln/Trello/Tumblr/Stackoverflow oauth/oauth2登陆</li>
  <li>PPT预览</li>
</ul>

<h4 id="section-2">使用了什么</h4>

<ul>
  <li>flask</li>
  <li>mongoengine (忍不了非orm)</li>
  <li>flask-script (像django那样的命令行启动)</li>
  <li>前端js借用我做喜欢的原作者的90%，然后根据我的需要改动，css基本没动</li>
  <li><a href="https://github.com/omab/python-social-auth">python-social-auth</a>的oauth后端，但是它使用的是flask+sqlalchemy，不支持flask+mongoengine，我改写了这部分</li>
</ul>

<h4 id="usage">Usage</h4>

<p>设置hosts文件</p>

<p>唉，本来申请了很多oauth想放在sae上面，但是遗憾的是新浪不支持，所以只能本地加hosts，让验证后的回调正确返回 linux 在你的/etc/hosts 文件里面添加一行</p>

<p><code>
YOURIP   YOURDOMAIN
</code></p>

<p>复制配置文件然后把你注册的ouauth放进去</p>

<p><code>
cp settings.py.example settings.py
</code></p>

<p>象django那样启动</p>

<p><code>
python manage.py runserver -t 0.0.0.0 -p 80
</code></p>

<p>And 访问主页<code>http://revealcn.sinaapp.com</code></p>

<h4 id="nginxuwsgi">使用nginx+uwsgi</h4>

<p>这里是我的配置nginx的这段（假设你git clone 后在/home/dongwm/flask_reveal）</p>

<p>```
server {
		listen 80;
		server_name revealcn.sinaapp.com;</p>

<pre><code>	access_log /var/log/nginx/revealcn.access_log main;
	error_log /var/log/nginx/revealcn.error_log info;
	location / {
            include uwsgi_params;
            uwsgi_pass unix:///tmp/uwsgi.sock;
    	}
	location /zongjie {
	root   /home/dongwm/flask_reveal;
	index index.html;
	}
}
</code></pre>

<p>```</p>

<p>uwsgi的xml配置</p>

<p>```</p>
<uwsgi>
     <pythonpath>/home/dongwm/flask_reveal</pythonpath>
     <module>manage</module>
     <socket>/tmp/uwsgi.sock</socket>    
    <callable>manager</callable>
     <master />
     <processes>4</processes>       
     <memory-report />
</uwsgi>
<p>```</p>

<p>这里有个坑，我的gentoo的uwsgi安装后是有插件的，你需要这样启动</p>

<p><code>
uwsgi_python27 -x uwsgi.xml 
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个flask例子]]></title>
    <link href="http://dongweiming.github.com/blog/archives/1ge-flaskli-zi/"/>
    <updated>2013-01-11T14:34:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/1ge-flaskli-zi</id>
    <content type="html"><![CDATA[<h4 id="section">前言：</h4>

<p>上段时间做了个demo, 使用了flask和mongodb，以及bootstrap, jquery，分享给大家当作入门flask的例子</p>

<h4 id="section-1">启动程序代码</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
#!/usr/bin/env python2
# encoding=utf-8
# Version 2 by Dongwm 2012/12/18

import os
from pymongo import Connection

from flask import Flask, request, render_template, redirect, url_for, jsonify
from paginate import Pagination
import setting

def static(filename):
    filepath = os.path.join(os.path.dirname(__file__), 'static', filename)
    last_modification = '%d' % os.path.getmtime(filepath)
    return url_for('.static', filename=filename) + '?' + last_modification  #我这里给每个文件加了一个唯一性质的时间戳

def create_app():
    app = Flask(__name__)
    app.config.from_object(setting)  #把一些可以控制的参数放在setting模块里面
    @app.context_processor
    def inject_static():
        return dict(static=static)
    return app

def conMongo(): #因为我很多地方都需要mongodb的游标，封装了下
	mongo = Connection(host='127.0.0.1',port=28012)
	return mongo

app = create_app()

@app.route('/list')  #flask使用装饰器的作为路由方式 表示访问你网站（比如http://localhost/list）的请求都会通过这个函数处理
def list(): #函数名字不重要，只要你能理解好维护，通过名字了解用途就好
	pagesize = 100  
	page = int(request.args.get('page',0))
	data = get_list_MongoData(page, pagesize) #这个获得mongodb的函数我就不提供了 简单理解就是更具页数和每页条目获取数据
	pagination = Pagination(total=data[1], per_page=pagesize, page=page)
	return render_template("list.html", tables=data[0], pagination=pagination) #有点像django的render_to_response,但是flask直接把要渲染的数据用K=V的方式传进来，而django需要放在字典里面，作为第二个参数传

@app.route('/')  
def index():
	return redirect(url_for('list')) #到网站跟目录的请求定向到/list

@app.route('/json')  
def getJson():

	db = conMongo()
	res = results(db)
	return jsonify(res)  #类似django的HttpResponse(simplejson.dumps(res), mimetype='application/json') 返回json数据

@app.route('/dev')
def dev():
	
	return render_template("dev.html")

if __name__ == '__main__':
	app.run(host="0.0.0.0")

</pre></figure></notextile></div>

<h4 id="settingspy">settings.py</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
DEBUG = True  #指定开启debug模式
PORT = 5000  #指定监听端口
</pre></figure></notextile></div>

<h4 id="devhtml">dev.html</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">


<xmp>
<!-- 注意这段代码我把 {/}和%分开了 为了和octoress生成的模板语法不冲突-->
{ % extends 'base.html' % }  //这里是先继承base.html模板 
{ % block title %}Dev{ % endblock % }  //重新设定title块的内容
{ %- block css % }  //重新设定css块  注意引用静态文件的方式
    <link rel="stylesheet" href="" />
    <style>
	.col_content{ height:500px; }
	h2 {text-align:center;}
	</style>
{ %- endblock % }
{ %- block js % }
    <script type="text/javascript" src=""></script>
    <script type="text/javascript" src=""></script>
    <script language="javascript" type="text/javascript">
		</script>
		{ %- endblock % }
		{ %- block diejs % }
			pie2html();  //这个js函数在core.js定义（base.html有引用）
		{ %- endblock % }
		{ %- block dev % }
	<div>
		<h2>服务器服务信息</h2>
		<div class="well col_content" id="webserver_content">
		Loading......
		</div>
		<h2>服务器应用信息</h2>
		<div class="well col_content" id="webapp_content">
		Loading......
		</div>
		<h2>Nginx服务具体版本</h2>
		<div class="well col_content" id="nginx_content">
		Loading......
		</div>
		<h2>Apache服务具体版本</h2>
		<div class="well col_content" id="apache_content">
		Loading......
		</div>
		<h2>Asp服务具体版本</h2>
		<div class="well col_content" id="asp_content">
		Loading......
		</div>
		<h2>网站技术信息</h2>
		<div class="well col_content" id="tech_content">
		Loading......
		</div>
		<h2>系统分类</h2>
		<div class="well col_content" id="system_content">
		Loading......
		</div>
		<h2>系统分类</h2>
		<div class="well col_content" id="version_content">
		Loading......
		</div>
		<h2>os</h2>
		<div class="well col_content" id="os_content">
		Loading......
		</div>
	</div>
{ %- endblock % }
</xmp>

</pre></figure></notextile></div>

<h4 id="basehtml">base.html</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">

<xmp>
&lt;!doctype html&gt;
<html>
  <head>
    <title> { % block title % }{ % endblock % }</title>  //block会设置的一个块，每个模板文件要是重新定义会覆盖，否则继承它的值
    <link rel="stylesheet" href="" />
    <link rel="stylesheet" href="" />  
    <link rel="stylesheet" href="" />
    { %- block css % }
    { %- endblock % }
    <script type="text/javascript" src=""></script>
    <script type="text/javascript" src=""></script>
    { %- block js % }
    { %- endblock % }
	<script language="javascript" type="text/javascript">
		$(document).ready(function() {
		var i = 0;
		$('#control').click(function() {
				if(i%2 == 0) {
					$('#zt-user').slideDown(500);  //加载完成的一个特效,都在style.css中定义
					$('#control').removeClass('bkg-control-down').addClass('control-up');
				}
				else {
					$('#zt-user').slideUp(500);
					$('#control').removeClass('bkg-control-up').addClass('control-down');
				}
				i++;
		});
		{ %- block diejs % }  //这个块定义在这里是为了每个模板文件都能定义文档加载完成执行的函数，一个页面只能有一个$(document).ready
		{ %- endblock % }
		</script>
</head>
	<body>
		<div id="zt-user">
			<div class="container">
				<div id="zt-user-inner" class="row-fluid">
					<div id="zt-top1" class="span12">
						<div class="zt-box-inside">
							<div class="moduletable">
								<div class="modulecontent">
						<form action="/" method="post">
							<div class="search">
								<input name="searchword" maxlength="20" class="inputbox" type="text" size="20" value="Start Searching ... " onblur="if (this.value=='') this.value='Start Searching ... ';" onfocus="if (this.value=='Start Searching ... ') this.value='';" /><input type="submit" value="Search" class="button" onclick="this.form.searchword.focus();" />
							</div>
						</form>
								</div>
							</div>
						</div>
					</div>																		
				</div>
			</div>
		</div>
		{ %- block dev % }{ %- endblock % }   //上面的dev.html重新声明了这个块，那么数据就会显示在这个位置
		{ %- block top % }
		<div id="zt-top">
			<div class="container">						
				<div class="row-fluid">
					<div class="control-up span6" id="control"><span>Search</span></div>
				<ul id="zt-topright" class="pull-right">
				<li class="blue" target="_blank"><a title="Demo" href="http://dongweiming.github.com/blog/list">列表</a></li>
				<li class="green" target="_blank"><a title="Demo" href="http://dongweiming.github.com/blog/dev">画图</a></li>
				</ul>
					</div>
				</div>
			</div>
		{ %- endblock % }
		{ %- block ttable % }{ %- endblock % }
		{ %- block footer % }
		<div id="zt-footer">
			<div class="container">				
				<p id="copyright">
				Copyright &copy; 2009 - 2013 <a href="http://www.dongwm.com" title="dongwm">(C)dongwm</a>. All Rights Reserved
				</p>
			</div>						
		</div>
		{ %- endblock % }
	</body>
</html>
</xmp>

</pre></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django和flask分页]]></title>
    <link href="http://dongweiming.github.com/blog/archives/djangohe-flaskfen-ye/"/>
    <updated>2012-12-29T15:37:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/djangohe-flaskfen-ye</id>
    <content type="html"><![CDATA[<h4 id="section"><em>前言</em></h4>

<p>最近搞了一些关于flask和django的东西，尤其是django的模板和admin功能以及这些框架使用bootstrap的东西，没时间更新博客，先说一下flask和django分页吧</p>

<h5 id="flaskbootstrapflask-paginatehttppackagespythonorgflask-paginate">flask的bootstrap分页插件<a href="http://packages.python.org/Flask-paginate">flask-paginate</a></h5>

<p>其实安装很常规，他的思路就是根据你的数据量给每个页面加一个li前缀到最后返回的div里面。因为官网提供的说明很简单，我在这里仔细说说：</p>

<ol>
  <li>官网说给你的网站页面添加css：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_bash">
.pagination-page-info {
    padding: .6em;
    padding-left: 0;
    width: 40em;
    margin: .5em;
    margin-left: 0;
    font-size: 12px;
}
.pagination-page-info b {
    color: black;
    background: #6aa6ed;
    padding-left: 2px;
    padding: .1em .25em;
    font-size: 150%;
}
</pre></figure></notextile></div>
<p>其实这个是给你页面显示统计数据的方法pagination.info提供的样式，默认的class=’pagination’是bootstrap自带的，不需要你添加</p>

<ol>
  <li>官网的例子使用的是：Blueprint：</li>
</ol>

<p>我们一般都是： ‘from flask import Flask’，其实Blueprint就是一个可定制的容器，一个应用可以有多个容器，他们都继承于flask.helpers._PackageBoundObject
可以看我的一个例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
@app.route('/')
def index():

	pagesize = 100 #设定每页显示条目数
	page = int(request.args.get('page',0)) #获取当前页面页数
	data = get_MongoData(page, pagesize) #get_MongoData是我自己的函数，根据页数过滤要显示的数据（因为实在太大了）
	pagination = Pagination(total=data[1], per_page=pagesize, page=page) #total的值是总数据条目，per_page表示每页显示数目，page就是当前页数。还可以设置向前/后页面标签（默认是&lt;&lt;/&gt;&gt;）等
	return render_template("index.html", pagination=pagination)
</pre></figure></notextile></div>

<ol>
  <li>我对他的一点修改：
    <ol>
      <li>我发现在我的程序里面，这个分页栏在后部会放不下而换行显示，我就直接把link_css制定的div改成了行内元素span</li>
      <li>当我默认使用link_size,代码是这样：</li>
    </ol>
    <xmp>
     link_css = '<span class="pagination{0} green"><ul>'
     其实最后页面出来的效果是'<span class="paginationNone green"><ul>' 
 
		
     这样就没有符合的bootstrap类，所以我修改了links方法:

     <div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
     @property
     def links(self):
         '''get all the pagination links'''
         if self.total_pages &lt;= 1:
             return ''
         if not self.link_size:
             self.link_size = ''
         s = [link_css.format(self.link_size)]
         s.append(self.prev_page)
         for page in self.pages:
             s.append(self.single_page(page) if page else gap_marker)

         s.append(self.next_page)
         s.append('')
         return ''.join(s)
     </pre></figure></notextile></div>

</ul></span></ul></span></xmp>
  </li>
</ol>
<p>#####flask的bootstrap分页插件<a href="http://tgdn.github.com/django-bootstrap-pagination/">django-bootstrap-pagination</a></p>

<p>django的插件比较复杂，它自己定义了中间件和标签，这样你需要在模板中load它提供的函数，并且很nb的使用了RequestContext去处理变量,可以看张沈鹏以前写的一个小文章：<a href="http://zsp.iteye.com/blog/115254">django 简化 view 函数的编写</a></p>

<ol>
  <li>先看我的后台方法：</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">

def showlist(req):

	t = req.GET.get('type', None)
	l = req.GET.get('app', None)
	if t and l:
		db = getMongo('XXX.XXX.XXX.XXX:XX', 'dc2')
		if t == 'v':
			q = re.compile(r'.*%s$' % l)
			data = db.site.find({'modules.site.level':'v4', 'site':{ '$regex' : q }}, 
				{'site':1, '_id':0, 'modules.site.links':1, 'modules.site.keywords':1}).sort(
				'modules.site.site.check_time')

	return render_to_response("list.html", {'data':data}, context_instance=RequestContext(req))
</pre></figure></notextile></div>

<p>但是运行时候会报错：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_python">
Traceback:
File "/usr/local/lib/python2.6/dist-packages/django/core/handlers/base.py" in get_response
  111.                         response = callback(request, *callback_args, **callback_kwargs)
File "/home/dongwm/centerCon/views.py" in showlist
  68. 	return render_to_response("list.html", {'data':data}, context_instance=RequestContext(req))
File "/usr/local/lib/python2.6/dist-packages/django/shortcuts/__init__.py" in render_to_response
  20.     return HttpResponse(loader.render_to_string(*args, **kwargs), **httpresponse_kwargs)
File "/usr/local/lib/python2.6/dist-packages/django/template/loader.py" in render_to_string
  176.         return t.render(context_instance)
File "/usr/local/lib/python2.6/dist-packages/django/template/base.py" in render
  140.             return self._render(context)
File "/usr/local/lib/python2.6/dist-packages/django/template/base.py" in _render
  134.         return self.nodelist.render(context)
File "/usr/local/lib/python2.6/dist-packages/django/template/base.py" in render
  823.                 bit = self.render_node(node, context)
File "/usr/local/lib/python2.6/dist-packages/django/template/debug.py" in render_node
  74.             return node.render(context)
File "/home/dongwm/centerCon/templatetags/pagination_tags.py" in render 
  91.             page_obj = paginator.page(context['request'].page)
File "/usr/local/lib/python2.6/dist-packages/django/template/context.py" in __getitem__
  54.         raise KeyError(key)

Exception Type: KeyError at /showlist/
Exception Value: 'request'
</pre></figure></notextile></div>

<p>不管你用那个插件都会有这个报错。。。</p>

<p><em>后来发现原因是：</em></p>

<p><em>settings文件没有设置TEMPLATE_CONTEXT_PROCESSORS</em>
理由：模板上下文处理器会指定了哪些contextprocessors总是默认被使用。这样就省去了每次使用RequestContext都指定processors的麻烦
在settings加入：
TEMPLATE_CONTEXT_PROCESSORS = (
    “django.core.context_processors.media”,
    “django.core.context_processors.request”
    )</p>
]]></content>
  </entry>
  
</feed>
