<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: python | 小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/blog/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/blog/"/>
  <updated>2014-12-10T13:28:41+08:00</updated>
  <id>http://dongweiming.github.com/blog/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ipython的一些高级用法(一)]]></title>
    <link href="http://dongweiming.github.com/blog/archives/ipythonde-%5B%3F%5D-xie-gao-ji-yong-fa/"/>
    <updated>2014-12-07T09:56:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/ipythonde-[?]-xie-gao-ji-yong-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>以前在我的PPT<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也提到了一些关于ipython的用法. 今天继续由浅入深的看看ipython,
本文作为读者的你已经知道ipython并且用了一段时间了.</p>

<h5 id="run">%run</h5>

<p>这是一个magic命令, 能把你的脚本里面的代码运行, 并且把对应的运行结果存入ipython的环境变量中:</p>

<p>```
$cat t.py
# coding=utf-8
l = range(5)</p>

<p>$ipython
In [1]: %run t.py # <code>%</code>可加可不加</p>

<p>In [2]: l # 这个l本来是t.py里面的变量, 这里直接可以使用了
Out[2]: [0, 1, 2, 3, 4]
```</p>

<h5 id="alias">alias</h5>

<p><code>python
In [3]: %alias largest ls -1sSh | grep %s
In [4]: largest to
total 42M
 20K tokenize.py
 16K tokenize.pyc
8.0K story.html
4.0K autopep8
4.0K autopep8.bak
4.0K story_layout.html
</code></p>

<p>PS 别名需要存储的, 否则重启ipython就不存在了:</p>

<p><code>
In [5]: %store largest
Alias stored: largest (ls -1sSh | grep %s)
</code></p>

<p>下次进入的时候<code>%store -r</code></p>

<h5 id="bookmark---">bookmark - 对目录做别名</h5>

<p>```python
In [2]: %pwd
Out[2]: u’/home/vagrant’</p>

<p>In [3]: %bookmark dongxi ~/shire/dongxi</p>

<p>In [4]: %cd dongxi
/home/vagrant/shire/dongxi_code</p>

<p>In [5]: %pwd
Out[5]: u’/home/vagrant/shire/dongxi_code’
```</p>

<h5 id="ipcluster---">ipcluster - 并行计算</h5>

<p>其实ipython提供的方便的并行计算的功能. 先回答ipython做并行计算的特点:</p>

<p>1.</p>

<p><code>bash
$wget http://www.gutenberg.org/files/27287/27287-0.txt
</code></p>

<p>第一个版本是直接的, 大家习惯的用法.</p>

<p>```python
In [1]: import re</p>

<p>In [2]: import io</p>

<p>In [3]: non_word = re.compile(r’[\W\d]+’, re.UNICODE)</p>

<p>In [4]: common_words = {
   …: ‘the’,’of’,’and’,’in’,’to’,’a’,’is’,’it’,’that’,’which’,’as’,’on’,’by’,
   …: ‘be’,’this’,’with’,’are’,’from’,’will’,’at’,’you’,’not’,’for’,’no’,’have’,
   …: ‘i’,’or’,’if’,’his’,’its’,’they’,’but’,’their’,’one’,’all’,’he’,’when’,
   …: ‘than’,’so’,’these’,’them’,’may’,’see’,’other’,’was’,’has’,’an’,’there’,
   …: ‘more’,’we’,’footnote’, ‘who’, ‘had’, ‘been’,  ‘she’, ‘do’, ‘what’,
   …: ‘her’, ‘him’, ‘my’, ‘me’, ‘would’, ‘could’, ‘said’, ‘am’, ‘were’, ‘very’,
   …: ‘your’, ‘did’, ‘not’,
   …: }</p>

<p>In [5]: def yield_words(filename):
   …:     import io
   …:     with io.open(filename, encoding=’latin-1’) as f:
   …:         for line in f:
   …:             for word in line.split():
   …:                 word = non_word.sub(‘’, word.lower())
   …:                 if word and word not in common_words:
   …:                     yield word
   …:</p>

<p>In [6]: def word_count(filename):
   …:     word_iterator = yield_words(filename)
   …:     counts = {}
   …:     counts = defaultdict(int)
   …:     while True:
   …:         try:
   …:             word = next(word_iterator)
   …:         except StopIteration:
   …:             break
   …:         else:
   …:             counts[word] += 1
   …:     return counts
   …:</p>

<p>In [6]: from collections import defaultdict # 脑残了 忘记放进去了..
In [7]: %time counts = word_count(filename)
CPU times: user 88.5 ms, sys: 2.48 ms, total: 91 ms
Wall time: 89.3 ms
```</p>

<p>现在用ipython来跑一下:</p>

<p><code>python
ipcluster start -n 2 # 好吧, 我的Mac是双核的
</code></p>

<p>先讲下ipython 并行计算的用法:</p>

<p>```python
In [1]: from IPython.parallel import Client # import之后才能用%px*的magic</p>

<p>In [2]: rc = Client()</p>

<p>In [3]: rc.ids # 因为我启动了2个进程
Out[3]: [0, 1]</p>

<p>In [4]: %autopx # 如果不自动 每句都需要: <code>%px xxx</code>
%autopx enabled</p>

<p>In [5]: import os # 这里没autopx的话 需要: <code>%px import os</code></p>

<p>In [6]: print os.getpid() # 2个进程的pid
[stdout:0] 62638
[stdout:1] 62636</p>

<p>In [7]: %pxconfig –targets 1 # 在autopx下 这个magic不可用
[stderr:0] ERROR: Line magic function <code>%pxconfig</code> not found.
[stderr:1] ERROR: Line magic function <code>%pxconfig</code> not found.</p>

<p>In [8]: %autopx # 再执行一次就会关闭autopx
%autopx disabled</p>

<p>In [10]: %pxconfig –targets 1 # 指定目标对象, 这样下面执行的代码就会只在第2个进程下运行</p>

<p>In [11]: %%px –noblock # 其实就是执行一段非阻塞的代码
   ….: import time
   ….: time.sleep(1)
   ….: os.getpid()
   ….:
Out[11]: <asyncresult: execute="" /></p>

<p>In [12]: %pxresult # 看 只返回了第二个进程的pid
Out[1:21]: 62636</p>

<p>In [13]: v = rc[:] # 使用全部的进程, ipython可以细粒度的控制那个engine执行的内容</p>

<p>In [14]: with v.sync_imports(): # 每个进程都导入time模块
   ….:     import time
   ….:
importing time on engine(s)</p>

<p>In [15]: def f(x):
   ….:     time.sleep(1)
   ….:     return x * x
   ….:</p>

<p>In [16]: v.map_sync(f, range(10)) # 同步的执行</p>

<p>Out[16]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p>

<p>In [17]: r = v.map(f, range(10)) # 异步的执行</p>

<p>In [18]: r.ready(), r.elapsed # celery的用法
Out[18]: (True, 5.87735)</p>

<p>In [19]: r.get() # 获得执行的结果
Out[19]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
```</p>

<p>入正题:</p>

<p>```python
In [20]: def split_text(filename):
….:    text = open(filename).read()
….:    lines = text.splitlines()
….:    nlines = len(lines)
….:    n = 10
….:    block = nlines//n
….:    for i in range(n):
….:        chunk = lines[i<em>block:(i+1)</em>(block)]
….:        with open(‘count_file%i.txt’ % i, ‘w’) as f:
….:            f.write(‘\n’.join(chunk))
….:    cwd = os.path.abspath(os.getcwd())
….:    fnames = [ os.path.join(cwd, ‘count_file%i.txt’ % i) for i in range(n)] # 不用glob是为了精准
….:    return fnames</p>

<p>In [21]: from IPython import parallel</p>

<p>In [22]: rc = parallel.Client()</p>

<p>In [23]: view = rc.load_balanced_view()</p>

<p>In [24]: v = rc[:]</p>

<p>In [25]: v.push(dict(
   ….:     non_word=non_word,
   ….:     yield_words=yield_words,
   ….:     common_words=common_words
   ….: ))
Out[25]: <asyncresult: _push="" /></p>

<p>In [26]: fnames = split_text(filename)</p>

<p>In [27]: def count_parallel():
   …..:     pcounts = view.map(word_count, fnames)
   …..:     counts = defaultdict(int)
   …..:     for pcount in pcounts.get():
   …..:         for k, v in pcount.iteritems():
   …..:             counts[k] += v
   …..:     return counts, pcounts
   …..:</p>

<p>In [28]: %time counts, pcounts = count_parallel() # 这个时间包含了我再聚合的时间
CPU times: user 47.6 ms, sys: 6.67 ms, total: 54.3 ms # 是不是比直接运行少了很多时间?
Wall time: 106 ms # 这个时间是</p>

<p>In [29]: pcounts.elapsed, pcounts.serial_time, pcounts.wall_time
Out[29]: (0.104384, 0.13980499999999998, 0.104384)
```</p>

<p>更多地关于并行计算请看这里: <a href="http://nbviewer.ipython.org/url/www.astro.washington.edu/users/vanderplas/Astr599/notebooks/21_IPythonParallel.ipynb">Parallel Computing with IPython</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python几个特别的__开头的方法]]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonji-ge-te-bie-de-kai-tou-de-fang-fa/"/>
    <updated>2014-12-06T22:51:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonji-ge-te-bie-de-kai-tou-de-fang-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p><a href="http://www.rafekettler.com/magicmethods.html">A Guide to Python’s Magic Methods</a>python的绝大多数这样的特殊方法都
在这里面被提到了. 今天我来说3个他没有提到的[__dir__, __slots__, __weakref__], 再强调下他提到的2个[__missing__, __contains__]</p>

<h5 id="dir---">__dir__ -&gt; 看个小例子就知道了</h5>

<p><code>python
In [1]: class T(object):
   ...:     pass
   ...:
In [2]: t = T()
In [3]: t.&lt;Tab&gt;
啥也没有...
</code></p>

<p><code>python
In [4]: class T2(object):
   ...:     def __dir__(self):
   ...:         return ['a', 'b']
   ...:
In [5]: t = T2()
In [6]: t.
t.a  t.b
In [7]: dir(t)
Out[7]: ['a', 'b']
</code></p>

<p>看出来了把, 不解释, 但是这个__dir__是相对于类的实例有效果的.</p>

<h5 id="slots">__slots__</h5>

<p>这个在我初学python的时候就被模糊了, 原来的理解是它的出现替代了__dict__，也就是说你只能给__slots__
这个变量列表项的属性赋值. 对外的接口减少了,也安全了. 后来看了这篇<a href="http://tech.oyster.com/save-ram-with-python-slots/">Saving 9 GB of RAM with Python’s <strong>slots</strong></a>.
好久不做运维了,在生产环境究竟怎么样我无法定论, <python cookbook="">也提到了,在对象实例很多的时候他能帮助减少内存, 详见https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch08s04.html.
这里来个小实验(在Hacker News也被讨论过https://news.ycombinator.com/item?id=6750187)</python></p>

<p>代码例子(我对细节做注释):</p>

<p>```python
# coding=utf-8
import sys
from itertools import starmap, product</p>

<p>class SlotTest(object):
    # <strong>slots</strong> = [‘x’, ‘y’, ‘z’] 主要对比去掉这句和包含这句程序内存占用</p>

<pre><code>def __init__(self, x, y, z):
        self.x = x
                self.y = y
                        self.z = z

def __str__(self):
        return "{} {} {}".format(self.x, self.y, self.z)
</code></pre>

<p>p = product(range(10000), range(20), [4]) # 创建0-1000 &amp; 0-20 &amp; 4 的笛卡尔积
a = list(starmap(SlotTest, p)) # 相当于对每个SlotTest实例化,实例化的格式是p的长度</p>

<p>print a[0]
sys.stdin.read(1)
```</p>

<p>结果对比:</p>

<p><code>bash
$pmap -x `ps -ef|grep test_slot.py|grep -v grep|awk '{print $2}'`|grep total # 未使用__slots__
  total kB          103496   76480   73728
$pmap -x `ps -ef|grep test_slot.py|grep -v grep|awk '{print $2}'`|grep total # 使用了__slots__
  total kB           49960   22888   20136
</code></p>

<p>结果很明显,内存占用减少了很多…</p>

<h5 id="weakref-">__weakref__ 弱引用</h5>

<p>首先先说下<a href="http://zh.wikipedia.org/wiki/%E5%BC%B1%E5%BC%95%E7%94%A8">weakref</a>: 弱引用，与强引用相对，是指不能确保其引用的对象不会被垃圾回收器回收的引用。一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收.
在Python中,当一个对象的引用数目为0的时候，才会被从内存中回收. 但是被循环引用呢?</p>

<p>```python
In [1]: import weakref</p>

<p>In [2]: import gc</p>

<p>In [3]: class Obj(object):
   …:     def a(self):
   …:         return 1
   …:
In [4]: obj = Obj()</p>

<p>In [5]: s = obj</p>

<p>In [6]: gc.collect() # 不可达引用对象的数量
Out[6]: 3</p>

<p>In [7]: print s is obj
True</p>

<p>In [8]: obj = 1 # 最初的被引用的对象改变了.</p>

<p>In [9]: gc.collect()
Out[9]: 0</p>

<p>In [10]: s is None # s还是指向了Obj 引用计数为1
Out[10]: False</p>

<p>In [11]: s
Out[11]: &lt;<strong>main</strong>.Obj at 0x2b36510&gt;</p>

<p>—-华丽的分割一下</p>

<p>In [12]: obj = Obj()</p>

<p>In [13]: r = weakref.ref(obj) # 让obj变成那个弱引用</p>

<p>In [14]: gc.collect()
Out[14]: 211</p>

<p>In [15]: r() is obj
True</p>

<p>In [16]: obj = 1</p>

<p>In [17]: gc.collect()
Out[17]: 0</p>

<p>In [18]: r() is None # 弱引用计数器没有增加，所以当obj不在引用Obj的时候，Obj对象就被释放了
Out[18]: True
```</p>

<p>好吧, 我的总结是弱引用是个好东西, 但是加了__slots__就不支持弱引用了. 所以需要__weakref__</p>

<p>```python
In [9]: class T3(object):
   …:     <strong>slots</strong> = []
      …:</p>

<p>In [10]: class T4(object):
   ….:     <strong>slots</strong> = ‘<strong>weakref</strong>’  # 这样就支持了weakref
      ….:</p>

<p>In [11]:  import weakref</p>

<p>In [12]: t3 = T3()</p>

<p>In [13]: t4 = T4()</p>

<h2 id="in-14-weakrefreft3">In [14]: weakref.ref(t3)</h2>
<p>TypeError                                 Traceback (most recent call last)</p>
<ipython-input-14-bdb7ab7ac3bc> in <module>()
----&gt; 1 weakref.ref(t3)

TypeError: cannot create weak reference to 'T3' object

In [15]: weakref.ref(t4)
Out[15]: &lt;weakref at 0x2766f70; to 'T4' at 0x2586fd8&gt;
```

##### \_\_contains\_\_ 判断某值 in/not in 实例

```python
In [1]: class NewList(object):
   ...:     def __init(self, values):
   ...:         self.values = values
   ...:     def __contains__(self, value):
   ...:         return value in self.values
   ...:
In [2]: l = NewList([1, 2, 3, 4])

In [3]: 4 in l
Out[3]: True

In [4]: 10 in l
Out[4]: False
```

##### \_\_missing\_\_

最初看这个特殊方法是看python标准库的源码的时候(collections#L421):

```python
class Counter(dict):
    ...

    def __missing__(self, key):
        'The count of elements not in the Counter is zero.'
        # Needed so that self[missing_item] does not raise KeyError
        return 0
```

什么意思呢?

```python
In [6]: c = collections.Counter({'a':1})

In [7]: c['b'] # 没有键的count设置默认值0
Out[7]: 0

```

很多人可能看过这个(关于defaultdict的ppt)[http://discorporate.us/jek/talks/defaultdict/]. 内容就不说了, 讲的非常好.
</module></ipython-input-14-bdb7ab7ac3bc>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python的魔法二:开发的'坑']]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonmo-fa-er/"/>
    <updated>2014-05-08T23:15:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonmo-fa-er</id>
    <content type="html"><![CDATA[<h4 id="python-httpwwwdongwmcomarchivespythonde-mo-fa-python">有了第一篇<a href="http://www.dongwm.com/archives/pythonde-mo-fa/">python的魔法(-)之基础知识</a>, 我们再来说说python开发中的坑</h4>

<h4 id="section">不要使用可变对象作为函数默认值</h4>

<p>```python
In [1]: def append_to_list(value, def_list=[]):
   …:         def_list.append(value)
   …:         return def_list
   …: </p>

<p>In [2]: my_list = append_to_list(1)</p>

<p>In [3]: my_list
Out[3]: [1]</p>

<p>In [4]: my_other_list = append_to_list(2)</p>

<p>In [5]: my_other_list
Out[5]: [1, 2] # 看到了吧，其实我们本来只想生成[2] 但是却把第一次运行的效果页带了进来</p>

<p>In [6]: import time</p>

<p>In [7]: def report_arg(my_default=time.time()):
   …:         print(my_default)
   …:     </p>

<p>In [8]: report_arg() # 第一次执行
1399562371.32</p>

<p>In [9]: time.sleep(2) # 隔了2秒</p>

<p>In [10]: report_arg()
1399562371.32 # 时间竟然没有变</p>

<p>```</p>

<p>这2个例子说明了什么? 字典,集合,列表等等对象是不适合作为函数默认值的. 因为这个默认值实在函数建立的时候就生成了, 每次调用都是用了这个对象的”缓存”. 我在上段时间的分享<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也说到了这个问题,这个是实际开发遇到的问题，好好检查你学过的代码, 也许只是问题没有暴露</p>

<p>可以这样改:</p>

<p><code>python
def append_to_list(element, to=None):
    if to is None:
        to = []
    to.append(element)
    return to
</code></p>

<h4 id="section-1">生成器不保留迭代过后的结果</h4>

<p>```python
In [12]: gen = (i for i in range(5))</p>

<p>In [13]: 2 in gen
Out[13]: True</p>

<p>In [14]: 3 in gen
Out[14]: True</p>

<p>In [15]: 1 in gen
Out[15]: False # 1为什么不在gen里面了? 因为调用1-&gt;2,这个时候1已经不在迭代器里面了,被按需生成过了</p>

<p>In [20]: gen = (i for i in range(5))</p>

<p>In [21]: a_list = list(gen) # 可以转化成列表，当然a_tuple = tuple(gen) 也可以</p>

<p>In [22]: 2 in a_list
Out[22]: True</p>

<p>In [23]: 3 in a_list
Out[23]: True</p>

<p>In [24]: 1 in a_list # 就算循环过,值还在
Out[24]: True
```</p>

<h4 id="lambda">lambda在闭包中会保存局部变量</h4>

<p>```python
In [29]: my_list = [lambda: i for i in range(5)]</p>

<p>In [30]: for l in my_list:
   ….:         print(l())
   ….:   <br />
4
4
4
4
4
```</p>

<p>这个问题还是上面说的<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>中说过具体原因. 其实就是当我赋值给my_list的时候,lambda表达式就执行了i会循环,直到 i =4,i会保留</p>

<p>但是可以用生成器</p>

<p>```python
In [31]: my_gen = (lambda: n for n in range(5))</p>

<p>In [32]: for l in my_gen:
   ….:         print(l())
   ….:   <br />
0
1
2
3
4
```</p>

<p>也可以坚持用list：</p>

<p>```python
In [33]: my_list = [lambda x=i: x for i in range(5)] # 看我给每个lambda表达式赋了默认值</p>

<p>In [34]: for l in my_list:
   ….:         print(l())
   ….:   <br />
0
1
2
3
4
```</p>

<p>有点不好懂是吧,在看看python的另外一个魔法:</p>

<p>```python
In [35]: def groupby(items, size):
   ….:     return zip(<em>[iter(items)]</em>size)
   ….: </p>

<p>In [36]: groupby(range(9), 3)
Out[36]: [(0, 1, 2), (3, 4, 5), (6, 7, 8)]
```</p>

<p>一个分组的函数,看起来很不好懂,对吧? 我们来解析下这里</p>

<p><code>python
In [39]: [iter(items)]*3
Out[39]: 
[&lt;listiterator at 0x10e155fd0&gt;,
 &lt;listiterator at 0x10e155fd0&gt;,
 &lt;listiterator at 0x10e155fd0&gt;] # 看到了吧, 其实就是把items变成可迭代的, 重复三回（同一个对象哦）, 但是别忘了,每次都.next(), 所以起到了分组的作用
 In [40]: [lambda x=i: x for i in range(5)]
Out[40]: 
[&lt;function __main__.&lt;lambda&gt;&gt;,
 &lt;function __main__.&lt;lambda&gt;&gt;,
 &lt;function __main__.&lt;lambda&gt;&gt;,
 &lt;function __main__.&lt;lambda&gt;&gt;,
 &lt;function __main__.&lt;lambda&gt;&gt;] # 看懂了吗?
</code></p>

<h4 id="section-2">在循环中修改列表项</h4>

<p>```python
In [44]: a = [1, 2, 3, 4, 5]</p>

<p>In [45]: for i in a:
   ….:     if not i % 2:
   ….:         a.remove(i)
   ….:         </p>

<p>In [46]: a
Out[46]: [1, 3, 5] # 没有问题</p>

<p>In [50]: b = [2, 4, 5, 6]</p>

<p>In [51]: for i in b:
   ….:      if not i % 2:
   ….:          b.remove(i)
   ….:         </p>

<p>In [52]: b
Out[52]: [4, 5] # 本来我想要的结果应该是去除偶数的列表
```</p>

<p>思考一下,为什么 – 是因为你对列表的remove,影响了它的index</p>

<p>```python
In [53]: b = [2, 4, 5, 6]</p>

<p>In [54]: for index, item in enumerate(b):
   ….:     print(index, item)
   ….:     if not item % 2:
   ….:         b.remove(item)
   ….:       <br />
(0, 2) # 这里没有问题 2被删除了
(1, 5) # 因为2被删除目前的列表是[4, 5, 6], 所以索引list[1]直接去找5, 忽略了4
(2, 6)
```</p>

<h4 id="indexerror---">IndexError - 列表取值超出了他的索引数</h4>

<p>```python
In [55]: my_list = [1, 2, 3, 4, 5]</p>

<h2 id="in-56-mylist5--">In [56]: my_list[5] # 根本没有这个元素</h2>
<p>IndexError                                Traceback (most recent call last)</p>
<ipython-input-56-037d00de8360> in <module>()
----&gt; 1 my_list[5]

IndexError: list index out of range # 抛异常了

In [57]: my_list[5:] # 但是可以这样， 一定要注意, 用好了是trick,用错了就是坑啊
Out[57]: []
```

#### 重用全局变量

```python
In [58]: def my_func():
   ....:         print(var) # 我可以先调用一个未定义的变量
   ....:     

In [59]: var = 'global' # 后赋值

In [60]: my_func() # 反正只要调用函数时候变量被定义了就可以了
global

In [61]: def my_func():
   ....:     var = 'locally changed'
   ....:     

In [62]: var = 'global'

In [63]: my_func()

In [64]: print(var)
global # 局部变量没有影响到全局变量

In [65]: def my_func():
   ....:         print(var) # 虽然你全局设置这个变量, 但是局部变量有同名的, python以为你忘了定义本地变量了
   ....:         var = 'locally changed'
   ....:         

In [66]: var = 'global'

In [67]: my_func()
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
<ipython-input-67-d82eda95de40> in <module>()
----&gt; 1 my_func()

<ipython-input-65-0ad11d690936> in my_func()
      1 def my_func():
----&gt; 2         print(var)
      3         var = 'locally changed'
      4 

UnboundLocalError: local variable 'var' referenced before assignment

In [68]: def my_func():
   ....:         global var # 这个时候得加全局了
   ....:         print(var) # 这样就能正常使用
   ....:         var = 'locally changed' 
   ....:     

In [69]: var = 'global'

In [70]: 

In [70]: my_func()
global

In [71]: print(var)
locally changed # 但是使用了global就改变了全局变量
```

#### 拷贝可变对象

```python
In [72]: my_list1 = [[1, 2, 3]] * 2

In [73]: my_list1
Out[73]: [[1, 2, 3], [1, 2, 3]]

In [74]: my_list1[1][0] = 'a' # 我只修改子列表中的一项

In [75]: my_list1
Out[75]: [['a', 2, 3], ['a', 2, 3]] # 但是都影响到了

In [76]: my_list2 = [[1, 2, 3] for i in range(2)] # 用这种循环生成不同对象的方法就不影响了

In [77]: my_list2[1][0] = 'a'

In [78]: my_list2
Out[78]: [[1, 2, 3], ['a', 2, 3]]
```
</ipython-input-65-0ad11d690936></module></ipython-input-67-d82eda95de40></module></ipython-input-56-037d00de8360>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python的魔法(一): 基本知识]]></title>
    <link href="http://dongweiming.github.com/blog/archives/pythonde-mo-fa/"/>
    <updated>2014-05-08T00:40:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/pythonde-mo-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近读了一篇<a href="http://nbviewer.ipython.org/github/rasbt/python_reference/blob/master/not_so_obvious_python_stuff.ipynb">A collection of not-so-obvious Python stuff you should know!</a>,感觉受益颇多. 翻译过来(非直接翻译),再加上一些我的理解和注释. 让大家注意python鲜为人知的”魔法”. 我会分2篇</p>

<h5 id="pythonc3">python多继承(C3)</h5>

<p>```python
In [1]: class A(object):
   …:         def foo(self):
   …:                 print(“class A”)
   …:         </p>

<p>In [2]: class B(object):
   …:         def foo(self):
   …:                 print(“class B”)
   …:         </p>

<p>In [3]: class C(A, B):
   …:         pass
   …: </p>

<p>In [4]: C().foo()
class A # 例子很好懂, C继承了A和B，从左到右,发现A有foo方法,返回了
```</p>

<p>看起来都是很简单, 有次序的从底向上,从前向后找,找到就返回. 再看例子:</p>

<p>```python
In [5]: class A(object):
   …:        def foo(self):
   …:               print(“class A”)
   …:         </p>

<p>In [6]: class B(A):
   …:        pass
   …: </p>

<p>In [7]: class C(A):
   …:        def foo(self):
   …:               print(“class C”)
   …:         </p>

<p>In [8]: class D(B,C):
   …:        pass
   …: </p>

<p>In [9]: D().foo()
class C # ? 按道理, 顺序是 D-&gt;B-&gt;A,为什么找到了C哪去了
```</p>

<p>这也就涉及了MRO(<a href="http://python-history.blogspot.ru/2010/06/method-resolution-order.html">Method Resolution Order</a>):</p>

<p><code>python
In [10]: D.__mro__
Out[10]: (__main__.D, __main__.B, __main__.C, __main__.A, object)
</code></p>

<p>简单的理解其实就是新式类是广度优先了， D-&gt;B, 但是发现C也是继承A，就先找C，最后再去找A</p>

<h4 id="appendextend">列表的+和+=, append和extend</h4>

<p>```python
In [17]: print(‘ID:’, id(a_list))
(‘ID:’, 4481323592)</p>

<p>In [18]: a_list += [1]</p>

<p>In [19]: print(‘ID (+=):’, id(a_list))
(‘ID (+=):’, 4481323592) # 使用+= 还是在原来的列表上操作</p>

<p>In [20]: a_list = a_list + [2]</p>

<p>In [21]: print(‘ID (list = list + …):’, id(a_list))
(‘ID (list = list + …):’, 4481293056) # 简单的+其实已经改变了原有列表
In [28]: a_list = []</p>

<p>In [29]: id(a_list)
Out[29]: 4481326976</p>

<p>In [30]: a_list.append(1)</p>

<p>In [31]: id(a_list)
Out[31]: 4481326976 # append 是在原有列表添加</p>

<p>In [32]: a_list.extend([2])</p>

<p>In [33]: id(a_list)
Out[33]: 4481326976 # extend 也是在原有列表上添加
```</p>

<h4 id="datetime">datetime也有布尔值</h4>

<p>这是一个<a href="http://lwn.net/SubscriberLink/590299/bf73fe823974acea/">坑</a></p>

<p>```python
In [34]: import datetime</p>

<p>In [35]: print(‘“datetime.time(0,0,0)” (Midnight) -&gt;’, bool(datetime.time(0,0,0)))
(‘“datetime.time(0,0,0)” (Midnight) -&gt;’, False)</p>

<p>In [36]: print(‘“datetime.time(1,0,0)” (1 am) -&gt;’, bool(datetime.time(1,0,0)))
(‘“datetime.time(1,0,0)” (1 am) -&gt;’, True)
```</p>

<h4 id="is-">’==’ 和 is 的区别</h4>
<p>我的理解是”is”是判断2个对象的身份, ==是判断2个对象的值</p>

<p>```python
In [37]: a = 1</p>

<p>In [38]: b = 1</p>

<p>In [39]: print(‘a is b’, bool(a is b))
(‘a is b’, True)</p>

<p>In [40]: c = 999</p>

<p>In [41]: d = 999</p>

<p>In [42]: print(‘c is d’, bool(c is d))
(‘c is d’, False) # 原因是python的内存管理,缓存了-5 - 256的对象</p>

<p>In [43]: print(‘256 is 257-1’, 256 is 257-1)
(‘256 is 257-1’, True)</p>

<p>In [44]: print(‘257 is 258-1’, 257 is 258 - 1)
(‘257 is 258-1’, False)</p>

<p>In [45]: print(‘-5 is -6+1’, -5 is -6+1)
(‘-5 is -6+1’, True)</p>

<p>In [46]: print(‘-7 is -6-1’, -7 is -6-1)
(‘-7 is -6-1’, False)
In [47]: a = ‘hello world!’</p>

<p>In [48]: b = ‘hello world!’</p>

<p>In [49]: print(‘a is b,’, a is b)
(‘a is b,’, False) # 很明显 他们没有被缓存,这是2个字段串的对象</p>

<p>In [50]: print(‘a == b,’, a == b)
(‘a == b,’, True) # 但他们的值相同
# But, 有个特例
In [51]: a = float(‘nan’)</p>

<p>In [52]: print(‘a is a,’, a is a)
(‘a is a,’, True)</p>

<p>In [53]: print(‘a == a,’, a == a)
(‘a == a,’, False) # 亮瞎我眼睛了~</p>

<p>```</p>

<h4 id="section-1">浅拷贝和深拷贝</h4>

<p>我们在实际开发中都可以向对某列表的对象做修改,但是可能不希望改动原来的列表. <strong>浅拷贝只拷贝父对象，深拷贝还会拷贝对象的内部的子对象</strong></p>

<p>```python
In [65]: list1 = [1, 2]</p>

<p>In [66]: list2 = list1 # 就是个引用, 你操作list2,其实list1的结果也会变</p>

<p>In [67]: list3 = list1[:]</p>

<p>In [69]: import copy</p>

<p>In [70]: list4 = copy.copy(list1) # 他和list3一样 都是浅拷贝</p>

<p>In [71]: id(list1), id(list2), id(list3), id(list4)
Out[71]: (4480620232, 4480620232, 4479667880, 4494894720)</p>

<p>In [72]: list2[0] = 3</p>

<p>In [73]: print(‘list1:’, list1)
(‘list1:’, [3, 2])</p>

<p>In [74]: list3[0] = 4</p>

<p>In [75]: list4[1] = 4</p>

<p>In [76]: print(‘list1:’, list1)
(‘list1:’, [3, 2]) # 对list3和list4操作都没有对list1有影响</p>

<h1 id="section-2">再看看深拷贝和浅拷贝的区别</h1>

<p>In [88]: from copy import copy, deepcopy</p>

<p>In [89]: list1 = [[1], [2]]</p>

<p>In [90]: list2 = copy(list1) # 还是浅拷贝</p>

<p>In [91]: list3 = deepcopy(list1) # 深拷贝</p>

<p>In [92]: id(list1), id(list2), id(list3)
Out[92]: (4494896592, 4495349160, 4494896088)</p>

<p>In [93]: list2[0][0] = 3</p>

<p>In [94]: print(‘list1:’, list1)
(‘list1:’, [[3], [2]]) # 看到了吧 假如你操作其子对象 还是和引用一样 影响了源</p>

<p>In [95]: list3[0][0] = 5</p>

<p>In [96]: print(‘list1:’, list1)
(‘list1:’, [[3], [2]]) # 深拷贝就不会影响
```</p>

<h4 id="boolint">bool其实是int的子类</h4>

<p>这篇<a href="http://www.peterbe.com/plog/bool-is-int">bool-is-int</a>很有趣:</p>

<p>```python
In [97]: isinstance(True, int)
Out[97]: True</p>

<p>In [98]: True + True
Out[98]: 2</p>

<p>In [99]: 3 * True + True
Out[99]: 4</p>

<p>In [100]: 3 * True - False
Out[100]: 3</p>

<p>In [104]: True « 10
Out[104]: 1024 
```</p>

<h4 id="section-3">元组是不是真的不可变?</h4>

<p>```python
In [111]: tup = ([],)</p>

<h2 id="in-112-tup0--1">In [112]: tup[0] += [1]</h2>
<p>TypeError                                 Traceback (most recent call last)</p>
<ipython-input-112-d4f292cf35de> in <module>()
----&gt; 1 tup[0] += [1]

TypeError: 'tuple' object does not support item assignment

In [113]: tup
Out[113]: ([1],) # 我靠 又是亮瞎我眼睛,明明抛了异常 还能修改?

In [114]: tup = ([],)

In [115]: tup[0].extend([1])

In [116]: tup[0]
Out[116]: [1] # 好吧,我有点看明白了, 虽然我不能直接操作元组，但是不能阻止我操作元组中可变的子对象(list)
```

这里有个不错的解释[Python's += Is Weird, Part II ](http://emptysqua.re/blog/python-increment-is-weird-part-ii/):

```python
In [117]: my_tup = (1,)

In [118]: my_tup += (4,)

In [119]: my_tup = my_tup + (5,)

In [120]: my_tup
Out[120]: (1, 4, 5) # ? 嗯 不是不能操作元组嘛?

In [121]: my_tup = (1,)

In [122]: print(id(my_tup))
4481317904

In [123]: my_tup += (4,)

In [124]: print(id(my_tup))
4480606864 # 操作的不是原来的元组 所以可以

In [125]: my_tup = my_tup + (5,)

In [126]: print(id(my_tup))
4474234912

```

#### python没有私有方法/变量? 但是可以有"伪"的

```python
In [127]: class my_class(object^E):
   .....:     def public_method(self):
   .....:         print('Hello public world!')
   .....:     def __private_method(self): # 私有以双下划线开头
   .....:         print('Hello private world!')
   .....:     def call_private_method_in_class(self):
   .....:         self.__private_method()
   
In [132]: my_instance = my_class()

In [133]: my_instance.public_method()
Hello public world! # 普通方法

In [134]: my_instance._my_class__private_method()
Hello private world! # 私有的可以加"_ + 类名字 + 私有方法名字”

In [135]: my_instance.call_private_method_in_class()
Hello private world! # 还可以通过类提供的公有接口内部访问

In [136]: my_instance._my_class__private_variable
Out[136]: 1

```

#### 异常处理加else

```python
In [150]: try:
   .....:     print('third element:', a_list[2])
   .....: except IndexError:
   .....:     print('raised IndexError')
   .....: else:
   .....:     print('no error in try-block') # 只有在try里面没有异常的时候才会执行else里面的表达式
   .....:     
raised IndexError # 抛异常了 没完全完成
In [153]: i = 0

In [154]: while i &lt; 2:
   .....:     print(i)
   .....:     i += 1
   .....: else:
   .....:     print('in else')
   .....:     
0
1
in else # while也支持哦~
In [155]: i = 0

In [156]: while i &lt; 2:
   .....:         print(i)
   .....:         i += 1
   .....:         break
   .....: else:
   .....:         print('completed while-loop')
   .....:     
0 # 被break了 没有完全执行完 就不执行else里面的了
In [158]: for i in range(2):
   .....:         print(i)
   .....: else:
   .....:         print('completed for-loop')
   .....:     
0
1
completed for-loop

In [159]: for i in range(2):
   .....:         print(i)
   .....:         break
   .....: else:
   .....:         print('completed for-loop')
   .....:     
0 # 也是因为break了
```
</module></ipython-input-112-d4f292cf35de>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程锁的一个大坑]]></title>
    <link href="http://dongweiming.github.com/blog/archives/xian-cheng-suo-de-%5B%3F%5D-ge-da-keng/"/>
    <updated>2014-04-18T16:56:00+08:00</updated>
    <id>http://dongweiming.github.com/blog/archives/xian-cheng-suo-de-[?]-ge-da-keng</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>原来的一位同事@炮哥, 昨天在QQ问我: “想请教下一个线程获得lock之后，也可能被其他的线程释放掉？这个是因为线程之间的资源是共享的吗？这样的话普通的thread lock 都是不安全的了？”. 我第一反应就是怎么可能:’谁加锁谁解锁呗,别的线程怎么能解锁？’</p>

<p>炮哥发来一段python官网的文档说明:</p>

<p><code>
A factory function that returns a new primitive lock object. Once a thread has acquired it, subsequent attempts to acquire it block, until it is released; any thread may release it.
</code></p>

<p>最有最后一句前是分号. 简单地说,一个线程获取锁, 以后的尝试获取都会被阻塞,除非它会释放. 但是<strong>同时</strong>其他其他线程可以释放</p>

<p>好,写个例子验证下:</p>

<p>```
import threading
import time</p>

<p>lock = threading.Lock()</p>

<p>def lock_holder(lock):
    print(‘Starting’)
    while True:
        lock.acquire()
        print(‘Holding’)
        time.sleep(100)
        print(‘Sleep done’)</p>

<p>def lock_release(lock):
    time.sleep(1) # 保证顺序
    lock.release()
    print(‘Release it’)</p>

<p>holder = threading.Thread(target=lock_holder, args=(lock,), name=’LockHolder’)
holder.setDaemon(True)
holder.start()</p>

<h1 id="lockreleaselock">lock_release(lock)</h1>
<p>release = threading.Thread(target=lock_release, args=(lock,), name=’release’)
release.start()</p>

<p>holder = threading.Thread(target=lock_holder, args=(lock,), name=’LockHolder’)
holder.setDaemon(True)
holder.start()
```</p>

<p>奇迹发生了…. 线程b果然可以释放线程a的锁,颠覆人生观啊.</p>

<p>PS: 但是Rlock不会被其他线程释放,因为它记录该线程的所有者</p>
]]></content>
  </entry>
  
</feed>
