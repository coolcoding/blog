<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[小明明s à domicile]]></title>
  <link href="http://dongweiming.github.com/atom.xml" rel="self"/>
  <link href="http://dongweiming.github.com/"/>
  <updated>2014-12-10T11:25:02+08:00</updated>
  <id>http://dongweiming.github.com/</id>
  <author>
    <name><![CDATA[Dongweiming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ipython的一些高级用法(一)]]></title>
    <link href="http://dongweiming.github.com/archives/ipythonde-%5B%3F%5D-xie-gao-ji-yong-fa/"/>
    <updated>2014-12-07T09:56:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/ipythonde-[?]-xie-gao-ji-yong-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>以前在我的PPT<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也提到了一些关于ipython的用法. 今天继续由浅入深的看看ipython,
本文作为读者的你已经知道ipython并且用了一段时间了.</p>

<h5 id="run">%run</h5>

<p>这是一个magic命令, 能把你的脚本里面的代码运行, 并且把对应的运行结果存入ipython的环境变量中:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cat t.py
</span><span class="line"># coding=utf-8
</span><span class="line">l = range(5)
</span><span class="line">
</span><span class="line">$ipython
</span><span class="line">In [1]: %run t.py # `%`可加可不加
</span><span class="line">
</span><span class="line">In [2]: l # 这个l本来是t.py里面的变量, 这里直接可以使用了
</span><span class="line">Out[2]: [0, 1, 2, 3, 4]</span></pre></figure></notextile></div>

<h5 id="alias">alias</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%</span><span class="n">alias</span> <span class="n">largest</span> <span class="n">ls</span> <span class="o">-</span><span class="mi">1</span><span class="n">sSh</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">%</span><span class="n">s</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">largest</span> <span class="n">to</span>
</span><span class="line"><span class="n">total</span> <span class="mi">42</span><span class="n">M</span>
</span><span class="line"> <span class="mi">20</span><span class="n">K</span> <span class="n">tokenize</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"> <span class="mi">16</span><span class="n">K</span> <span class="n">tokenize</span><span class="o">.</span><span class="n">pyc</span>
</span><span class="line"><span class="mf">8.0</span><span class="n">K</span> <span class="n">story</span><span class="o">.</span><span class="n">html</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">autopep8</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">autopep8</span><span class="o">.</span><span class="n">bak</span>
</span><span class="line"><span class="mf">4.0</span><span class="n">K</span> <span class="n">story_layout</span><span class="o">.</span><span class="n">html</span>
</span></pre></figure></notextile></div>

<p>PS 别名需要存储的, 否则重启ipython就不存在了:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%</span><span class="n">store</span> <span class="n">largest</span>
</span><span class="line"><span class="n">Alias</span> <span class="n">stored</span><span class="p">:</span> <span class="n">largest</span> <span class="p">(</span><span class="n">ls</span> <span class="o">-</span><span class="mi">1</span><span class="n">sSh</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">%</span><span class="n">s</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>下次进入的时候<code>%store -r</code></p>

<h5 id="bookmark---">bookmark - 对目录做别名</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="o">%</span><span class="n">pwd</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="s">u&#39;/home/vagrant&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="o">%</span><span class="n">bookmark</span> <span class="n">dongxi</span> <span class="o">~/</span><span class="n">shire</span><span class="o">/</span><span class="n">dongxi</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">cd</span> <span class="n">dongxi</span>
</span><span class="line"><span class="o">/</span><span class="n">home</span><span class="o">/</span><span class="n">vagrant</span><span class="o">/</span><span class="n">shire</span><span class="o">/</span><span class="n">dongxi_code</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="o">%</span><span class="n">pwd</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="s">u&#39;/home/vagrant/shire/dongxi_code&#39;</span>
</span></pre></figure></notextile></div>

<h5 id="ipcluster---">ipcluster - 并行计算</h5>

<p>其实ipython提供的方便的并行计算的功能. 先回答ipython做并行计算的特点:</p>

<p>1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line"><span class="nv">$wget</span> http://www.gutenberg.org/files/27287/27287-0.txt
</span></pre></figure></notextile></div>

<p>第一个版本是直接的, 大家习惯的用法.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">re</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">io</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">non_word</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&#39;[\W\d]+&#39;</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">UNICODE</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">common_words</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;the&#39;</span><span class="p">,</span><span class="s">&#39;of&#39;</span><span class="p">,</span><span class="s">&#39;and&#39;</span><span class="p">,</span><span class="s">&#39;in&#39;</span><span class="p">,</span><span class="s">&#39;to&#39;</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;is&#39;</span><span class="p">,</span><span class="s">&#39;it&#39;</span><span class="p">,</span><span class="s">&#39;that&#39;</span><span class="p">,</span><span class="s">&#39;which&#39;</span><span class="p">,</span><span class="s">&#39;as&#39;</span><span class="p">,</span><span class="s">&#39;on&#39;</span><span class="p">,</span><span class="s">&#39;by&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;be&#39;</span><span class="p">,</span><span class="s">&#39;this&#39;</span><span class="p">,</span><span class="s">&#39;with&#39;</span><span class="p">,</span><span class="s">&#39;are&#39;</span><span class="p">,</span><span class="s">&#39;from&#39;</span><span class="p">,</span><span class="s">&#39;will&#39;</span><span class="p">,</span><span class="s">&#39;at&#39;</span><span class="p">,</span><span class="s">&#39;you&#39;</span><span class="p">,</span><span class="s">&#39;not&#39;</span><span class="p">,</span><span class="s">&#39;for&#39;</span><span class="p">,</span><span class="s">&#39;no&#39;</span><span class="p">,</span><span class="s">&#39;have&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;i&#39;</span><span class="p">,</span><span class="s">&#39;or&#39;</span><span class="p">,</span><span class="s">&#39;if&#39;</span><span class="p">,</span><span class="s">&#39;his&#39;</span><span class="p">,</span><span class="s">&#39;its&#39;</span><span class="p">,</span><span class="s">&#39;they&#39;</span><span class="p">,</span><span class="s">&#39;but&#39;</span><span class="p">,</span><span class="s">&#39;their&#39;</span><span class="p">,</span><span class="s">&#39;one&#39;</span><span class="p">,</span><span class="s">&#39;all&#39;</span><span class="p">,</span><span class="s">&#39;he&#39;</span><span class="p">,</span><span class="s">&#39;when&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;than&#39;</span><span class="p">,</span><span class="s">&#39;so&#39;</span><span class="p">,</span><span class="s">&#39;these&#39;</span><span class="p">,</span><span class="s">&#39;them&#39;</span><span class="p">,</span><span class="s">&#39;may&#39;</span><span class="p">,</span><span class="s">&#39;see&#39;</span><span class="p">,</span><span class="s">&#39;other&#39;</span><span class="p">,</span><span class="s">&#39;was&#39;</span><span class="p">,</span><span class="s">&#39;has&#39;</span><span class="p">,</span><span class="s">&#39;an&#39;</span><span class="p">,</span><span class="s">&#39;there&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;more&#39;</span><span class="p">,</span><span class="s">&#39;we&#39;</span><span class="p">,</span><span class="s">&#39;footnote&#39;</span><span class="p">,</span> <span class="s">&#39;who&#39;</span><span class="p">,</span> <span class="s">&#39;had&#39;</span><span class="p">,</span> <span class="s">&#39;been&#39;</span><span class="p">,</span>  <span class="s">&#39;she&#39;</span><span class="p">,</span> <span class="s">&#39;do&#39;</span><span class="p">,</span> <span class="s">&#39;what&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;her&#39;</span><span class="p">,</span> <span class="s">&#39;him&#39;</span><span class="p">,</span> <span class="s">&#39;my&#39;</span><span class="p">,</span> <span class="s">&#39;me&#39;</span><span class="p">,</span> <span class="s">&#39;would&#39;</span><span class="p">,</span> <span class="s">&#39;could&#39;</span><span class="p">,</span> <span class="s">&#39;said&#39;</span><span class="p">,</span> <span class="s">&#39;am&#39;</span><span class="p">,</span> <span class="s">&#39;were&#39;</span><span class="p">,</span> <span class="s">&#39;very&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="s">&#39;your&#39;</span><span class="p">,</span> <span class="s">&#39;did&#39;</span><span class="p">,</span> <span class="s">&#39;not&#39;</span><span class="p">,</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">yield_words</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="kn">import</span> <span class="nn">io</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">with</span> <span class="n">io</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">&#39;latin-1&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">():</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="n">word</span> <span class="o">=</span> <span class="n">non_word</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">word</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">if</span> <span class="n">word</span> <span class="ow">and</span> <span class="n">word</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">common_words</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                     <span class="k">yield</span> <span class="n">word</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">word_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">word_iterator</span> <span class="o">=</span> <span class="n">yield_words</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">try</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="n">word</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">word_iterator</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="k">break</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>             <span class="n">counts</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">return</span> <span class="n">counts</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span> <span class="c"># 脑残了 忘记放进去了..</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="n">counts</span> <span class="o">=</span> <span class="n">word_count</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mf">88.5</span> <span class="n">ms</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mf">2.48</span> <span class="n">ms</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mi">91</span> <span class="n">ms</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mf">89.3</span> <span class="n">ms</span>
</span></pre></figure></notextile></div>

<p>现在用ipython来跑一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">ipcluster</span> <span class="n">start</span> <span class="o">-</span><span class="n">n</span> <span class="mi">2</span> <span class="c"># 好吧, 我的Mac是双核的</span>
</span></pre></figure></notextile></div>

<p>先讲下ipython 并行计算的用法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">IPython.parallel</span> <span class="kn">import</span> <span class="n">Client</span> <span class="c"># import之后才能用%px*的magic</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">Client</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">rc</span><span class="o">.</span><span class="n">ids</span> <span class="c"># 因为我启动了2个进程</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="o">%</span><span class="n">autopx</span> <span class="c"># 如果不自动 每句都需要: `%px xxx`</span>
</span><span class="line"><span class="o">%</span><span class="n">autopx</span> <span class="n">enabled</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">os</span> <span class="c"># 这里没autopx的话 需要: `%px import os`</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">print</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span> <span class="c"># 2个进程的pid</span>
</span><span class="line"><span class="p">[</span><span class="n">stdout</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="mi">62638</span>
</span><span class="line"><span class="p">[</span><span class="n">stdout</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="mi">62636</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxconfig</span> <span class="o">--</span><span class="n">targets</span> <span class="mi">1</span> <span class="c"># 在autopx下 这个magic不可用</span>
</span><span class="line"><span class="p">[</span><span class="n">stderr</span><span class="p">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">ERROR</span><span class="p">:</span> <span class="n">Line</span> <span class="n">magic</span> <span class="n">function</span> <span class="sb">`%pxconfig`</span> <span class="ow">not</span> <span class="n">found</span><span class="o">.</span>
</span><span class="line"><span class="p">[</span><span class="n">stderr</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="n">ERROR</span><span class="p">:</span> <span class="n">Line</span> <span class="n">magic</span> <span class="n">function</span> <span class="sb">`%pxconfig`</span> <span class="ow">not</span> <span class="n">found</span><span class="o">.</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="o">%</span><span class="n">autopx</span> <span class="c"># 再执行一次就会关闭autopx</span>
</span><span class="line"><span class="o">%</span><span class="n">autopx</span> <span class="n">disabled</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxconfig</span> <span class="o">--</span><span class="n">targets</span> <span class="mi">1</span> <span class="c"># 指定目标对象, 这样下面执行的代码就会只在第2个进程下运行</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">%%</span><span class="n">px</span> <span class="o">--</span><span class="n">noblock</span> <span class="c"># 其实就是执行一段非阻塞的代码</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">AsyncResult</span><span class="p">:</span> <span class="n">execute</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="o">%</span><span class="n">pxresult</span> <span class="c"># 看 只返回了第二个进程的pid</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">21</span><span class="p">]:</span> <span class="mi">62636</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rc</span><span class="p">[:]</span> <span class="c"># 使用全部的进程, ipython可以细粒度的控制那个engine执行的内容</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="k">with</span> <span class="n">v</span><span class="o">.</span><span class="n">sync_imports</span><span class="p">():</span> <span class="c"># 每个进程都导入time模块</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="n">importing</span> <span class="n">time</span> <span class="n">on</span> <span class="n">engine</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">v</span><span class="o">.</span><span class="n">map_sync</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># 同步的执行</span>
</span><span class="line">
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="c"># 异步的执行</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">ready</span><span class="p">(),</span> <span class="n">r</span><span class="o">.</span><span class="n">elapsed</span> <span class="c"># celery的用法</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="mf">5.87735</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="n">r</span><span class="o">.</span><span class="n">get</span><span class="p">()</span> <span class="c"># 获得执行的结果</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">]</span>
</span></pre></figure></notextile></div>

<p>入正题:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">split_text</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">text</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">nlines</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">block</span> <span class="o">=</span> <span class="n">nlines</span><span class="o">//</span><span class="n">n</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>        <span class="n">chunk</span> <span class="o">=</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">block</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">block</span><span class="p">)]</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;count_file</span><span class="si">%i</span><span class="s">.txt&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">cwd</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">())</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="n">fnames</span> <span class="o">=</span> <span class="p">[</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">cwd</span><span class="p">,</span> <span class="s">&#39;count_file</span><span class="si">%i</span><span class="s">.txt&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="c"># 不用glob是为了精准</span>
</span><span class="line"><span class="o">....</span><span class="p">:</span>    <span class="k">return</span> <span class="n">fnames</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">IPython</span> <span class="kn">import</span> <span class="n">parallel</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">parallel</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="n">view</span> <span class="o">=</span> <span class="n">rc</span><span class="o">.</span><span class="n">load_balanced_view</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="n">v</span> <span class="o">=</span> <span class="n">rc</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">25</span><span class="p">]:</span> <span class="n">v</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">non_word</span><span class="o">=</span><span class="n">non_word</span><span class="p">,</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">yield_words</span><span class="o">=</span><span class="n">yield_words</span><span class="p">,</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">common_words</span><span class="o">=</span><span class="n">common_words</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span> <span class="p">))</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">25</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">AsyncResult</span><span class="p">:</span> <span class="n">_push</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">26</span><span class="p">]:</span> <span class="n">fnames</span> <span class="o">=</span> <span class="n">split_text</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">27</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">count_parallel</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">pcounts</span> <span class="o">=</span> <span class="n">view</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="n">word_count</span><span class="p">,</span> <span class="n">fnames</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">for</span> <span class="n">pcount</span> <span class="ow">in</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">get</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">pcount</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>             <span class="n">counts</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">+=</span> <span class="n">v</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">return</span> <span class="n">counts</span><span class="p">,</span> <span class="n">pcounts</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="o">%</span><span class="n">time</span> <span class="n">counts</span><span class="p">,</span> <span class="n">pcounts</span> <span class="o">=</span> <span class="n">count_parallel</span><span class="p">()</span> <span class="c"># 这个时间包含了我再聚合的时间</span>
</span><span class="line"><span class="n">CPU</span> <span class="n">times</span><span class="p">:</span> <span class="n">user</span> <span class="mf">47.6</span> <span class="n">ms</span><span class="p">,</span> <span class="n">sys</span><span class="p">:</span> <span class="mf">6.67</span> <span class="n">ms</span><span class="p">,</span> <span class="n">total</span><span class="p">:</span> <span class="mf">54.3</span> <span class="n">ms</span> <span class="c"># 是不是比直接运行少了很多时间?</span>
</span><span class="line"><span class="n">Wall</span> <span class="n">time</span><span class="p">:</span> <span class="mi">106</span> <span class="n">ms</span> <span class="c"># 这个时间是</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">elapsed</span><span class="p">,</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">serial_time</span><span class="p">,</span> <span class="n">pcounts</span><span class="o">.</span><span class="n">wall_time</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="p">(</span><span class="mf">0.104384</span><span class="p">,</span> <span class="mf">0.13980499999999998</span><span class="p">,</span> <span class="mf">0.104384</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>更多地关于并行计算请看这里: <a href="http://nbviewer.ipython.org/url/www.astro.washington.edu/users/vanderplas/Astr599/notebooks/21_IPythonParallel.ipynb">Parallel Computing with IPython</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python几个特别的__开头的方法]]></title>
    <link href="http://dongweiming.github.com/archives/pythonji-ge-te-bie-de-kai-tou-de-fang-fa/"/>
    <updated>2014-12-06T22:51:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/pythonji-ge-te-bie-de-kai-tou-de-fang-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p><a href="http://www.rafekettler.com/magicmethods.html">A Guide to Python’s Magic Methods</a>python的绝大多数这样的特殊方法都
在这里面被提到了. 今天我来说3个他没有提到的[<strong>dir</strong>, <strong>slots</strong>, <strong>weakref</strong>], 再强调下他提到的2个[<strong>missing</strong>, <strong>contains</strong>]</p>

<h5 id="dir---"><strong>dir</strong> -&gt; 看个小例子就知道了</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">t</span> <span class="o">=</span> <span class="n">T</span><span class="p">()</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">t</span><span class="o">.&lt;</span><span class="n">Tab</span><span class="o">&gt;</span>
</span><span class="line"><span class="err">啥也没有</span><span class="o">...</span>
</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T2</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__dir__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">]</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">t</span> <span class="o">=</span> <span class="n">T2</span><span class="p">()</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">t</span><span class="o">.</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">a</span>  <span class="n">t</span><span class="o">.</span><span class="n">b</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="nb">dir</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">]</span>
</span></pre></figure></notextile></div>

<p>看出来了把, 不解释, 但是这个__dir__是相对于类的实例有效果的.</p>

<h5 id="slots"><strong>slots</strong></h5>

<p>这个在我初学python的时候就被模糊了, 原来的理解是它的出现替代了__dict<strong>，也就是说你只能给__slots</strong>
这个变量列表项的属性赋值. 对外的接口减少了,也安全了. 后来看了这篇<a href="http://tech.oyster.com/save-ram-with-python-slots/">Saving 9 GB of RAM with Python’s <strong>slots</strong></a>.
好久不做运维了,在生产环境究竟怎么样我无法定论, <python cookbook="">也提到了,在对象实例很多的时候他能帮助减少内存, 详见https://www.safaribooksonline.com/library/view/python-cookbook-3rd/9781449357337/ch08s04.html.
这里来个小实验(在Hacker News也被讨论过https://news.ycombinator.com/item?id=6750187)</python></p>

<p>代码例子(我对细节做注释):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">starmap</span><span class="p">,</span> <span class="n">product</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SlotTest</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="c"># __slots__ = [&#39;x&#39;, &#39;y&#39;, &#39;z&#39;] 主要对比去掉这句和包含这句程序内存占用</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class="line">                    <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class="line">                            <span class="bp">self</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">z</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="s">&quot;{} {} {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">p</span> <span class="o">=</span> <span class="n">product</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10000</span><span class="p">),</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="p">[</span><span class="mi">4</span><span class="p">])</span> <span class="c"># 创建0-1000 &amp; 0-20 &amp; 4 的笛卡尔积</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">starmap</span><span class="p">(</span><span class="n">SlotTest</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="c"># 相当于对每个SlotTest实例化,实例化的格式是p的长度</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>结果对比:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line"><span class="nv">$pmap</span> -x <span class="sb">`</span>ps -ef|grep test_slot.py|grep -v grep|awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>|grep total <span class="c"># 未使用__slots__</span>
</span><span class="line">  total kB          103496   76480   73728
</span><span class="line"><span class="nv">$pmap</span> -x <span class="sb">`</span>ps -ef|grep test_slot.py|grep -v grep|awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>|grep total <span class="c"># 使用了__slots__</span>
</span><span class="line">  total kB           49960   22888   20136
</span></pre></figure></notextile></div>

<p>结果很明显,内存占用减少了很多…</p>

<h5 id="weakref-"><strong>weakref</strong> 弱引用</h5>

<p>首先先说下<a href="http://zh.wikipedia.org/wiki/%E5%BC%B1%E5%BC%95%E7%94%A8">weakref</a>: 弱引用，与强引用相对，是指不能确保其引用的对象不会被垃圾回收器回收的引用。一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，并因此可能在任何时刻被回收.
在Python中,当一个对象的引用数目为0的时候，才会被从内存中回收. 但是被循环引用呢?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">weakref</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">gc</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">Obj</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Obj</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">s</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span> <span class="c"># 不可达引用对象的数量</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="k">print</span> <span class="n">s</span> <span class="ow">is</span> <span class="n">obj</span>
</span><span class="line"><span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="mi">1</span> <span class="c"># 最初的被引用的对象改变了.</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="c"># s还是指向了Obj 引用计数为1</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="n">s</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Obj</span> <span class="n">at</span> <span class="mh">0x2b36510</span><span class="o">&gt;</span>
</span><span class="line">
</span><span class="line"><span class="o">----</span><span class="err">华丽的分割一下</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">Obj</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="c"># 让obj变成那个弱引用</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="mi">211</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">r</span><span class="p">()</span> <span class="ow">is</span> <span class="n">obj</span>
</span><span class="line"><span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">16</span><span class="p">]:</span> <span class="n">obj</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="n">gc</span><span class="o">.</span><span class="n">collect</span><span class="p">()</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">r</span><span class="p">()</span> <span class="ow">is</span> <span class="bp">None</span> <span class="c"># 弱引用计数器没有增加，所以当obj不在引用Obj的时候，Obj对象就被释放了</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="bp">True</span>
</span></pre></figure></notextile></div>

<p>好吧, 我的总结是弱引用是个好东西, 但是加了__slots__就不支持弱引用了. 所以需要__weakref__</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T3</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="n">__slots__</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">      <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">T4</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">__slots__</span> <span class="o">=</span> <span class="s">&#39;__weakref__&#39;</span>  <span class="c"># 这样就支持了weakref</span>
</span><span class="line">      <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span>  <span class="kn">import</span> <span class="nn">weakref</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">t3</span> <span class="o">=</span> <span class="n">T3</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="n">t4</span> <span class="o">=</span> <span class="n">T4</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">t3</span><span class="p">)</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">TypeError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">14</span><span class="o">-</span><span class="n">bdb7ab7ac3bc</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">t3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">create</span> <span class="n">weak</span> <span class="n">reference</span> <span class="n">to</span> <span class="s">&#39;T3&#39;</span> <span class="nb">object</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="n">weakref</span><span class="o">.</span><span class="n">ref</span><span class="p">(</span><span class="n">t4</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="o">&lt;</span><span class="n">weakref</span> <span class="n">at</span> <span class="mh">0x2766f70</span><span class="p">;</span> <span class="n">to</span> <span class="s">&#39;T4&#39;</span> <span class="n">at</span> <span class="mh">0x2586fd8</span><span class="o">&gt;</span>
</span></pre></figure></notextile></div>

<h5 id="contains--innot-in-"><strong>contains</strong> 判断某值 in/not in 实例</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">NewList</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__init</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">values</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="bp">self</span><span class="o">.</span><span class="n">values</span> <span class="o">=</span> <span class="n">values</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">values</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">l</span> <span class="o">=</span> <span class="n">NewList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="mi">4</span> <span class="ow">in</span> <span class="n">l</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="mi">10</span> <span class="ow">in</span> <span class="n">l</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="bp">False</span>
</span></pre></figure></notextile></div>

<h5 id="missing"><strong>missing</strong></h5>

<p>最初看这个特殊方法是看python标准库的源码的时候(collections#L421):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">Counter</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__missing__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class="line">        <span class="s">&#39;The count of elements not in the Counter is zero.&#39;</span>
</span><span class="line">        <span class="c"># Needed so that self[missing_item] does not raise KeyError</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span>
</span></pre></figure></notextile></div>

<p>什么意思呢?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">c</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">Counter</span><span class="p">({</span><span class="s">&#39;a&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">})</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="n">c</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span> <span class="c"># 没有键的count设置默认值0</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="mi">0</span>
</span></pre></figure></notextile></div>

<p>很多人可能看过这个(关于defaultdict的ppt)[http://discorporate.us/jek/talks/defaultdict/]. 内容就不说了, 讲的非常好.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个使用python的web程序员的emacs.d]]></title>
    <link href="http://dongweiming.github.com/archives/%5B%3F%5D-ge-shi-yong-pythonde-webcheng-xu-yuan-de-emacs-dot-d/"/>
    <updated>2014-08-12T06:49:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/[?]-ge-shi-yong-pythonde-webcheng-xu-yuan-de-emacs-dot-d</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>越来越多的人使用emacs作为开发工具. 甚至skype,gmail,豆瓣FM都能通过emacs.
作为一个产品开发,肯定使用很多插件,设置一些快捷键来提高开发效率.以前一直使用
<a href="https://github.com/bbatsov/prelude">prelude</a>,很久之后发现有以下问题:</p>

<ol>
  <li>比如开启python语言支持需要在prelude-modules.el里面把python这样的注释去掉</li>
  <li>我不需要支持这么多的语言,也不需要那么多快捷键</li>
  <li>aotupair实在太难用了</li>
  <li>scss/css模式不好自定义缩进空格数, tab和空格混用. 不好定制</li>
  <li>看过源码后发现,其实很来很简单粗暴的事情弄得有点复杂了</li>
</ol>

<p>我造了个轮子<a href="https://github.com/dongweiming/emacs.d">.emacs.d</a>,主要针对python和web开发</p>

<h4 id="update">Update</h4>

<p>2014-09-28, 经过这一个月的继续研究,已经有了很大的改变</p>

<h4 id="section-1">项目目录结构</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">├── Cask ; 我使用[cask](https://github.com/cask/cask)做包管理工具
</span><span class="line">├── auto-insert ; 使用auto-insert设置新增elisp/python文件自动添加基于yasnippet的模板
</span><span class="line">│   ├── elisp-auto-insert
</span><span class="line">│   └── python-auto-insert
</span><span class="line">├── custom ; 自定义插件目录,你也可以把你写的程序放进来然后在init.el里面require
</span><span class="line">│   ├── flycheck.el ; 定制flycheck,让它在保存python程序时自动执行pep8和flake8,有问题的条目会打开新的buffer打印出来
</span><span class="line">│   └── py-autopep8.el ; 我自己实现了autopep8插件,保存时自动根据pep8标准处理文件
</span><span class="line">├── functions.el ; 用到的相关函数
</span><span class="line">├── helper.el ; 我自己写了个类似`C-h b`的介绍绑定的快捷键的预览表
</span><span class="line">├── hs-minor-mode-conf.el ; python函数/类折叠
</span><span class="line">├── init.el ; emacs启动的主程序
</span><span class="line">├── keys.el ; Key-chord配置,默认被注释了,因为它和我经常大片粘贴代码中代码重复造成很多麻烦
</span><span class="line">├── local-settings.el ; 本机的本地配置,比如用户名,单独的快捷键等
</span><span class="line">├── misc.el ; 对emacs本身的一些配置
</span><span class="line">├── mode-mappings.el ; 模式映射,比如Cask会自动用emacs-lisp-mode
</span><span class="line">├── modeline.el ; 我重新定制了modeline，使用了nyan-mode和powerline,一些加颜色的hack
</span><span class="line">├── osx.el ; Mac下的一些独立配置,为我的hhkb定制
</span><span class="line">├── smartparens-config.el ; 定制了smartparens配置
</span><span class="line">├── tmp
</span><span class="line">│   └── README.md
</span><span class="line">└── xiaoming-theme.el ; 我自己写了一个主题,好吧 我就是`小明`</span></pre></figure></notextile></div>

<h4 id="section-2">使用的插件列表</h4>

<ol>
  <li>f - 处理文件相关的库</li>
  <li>s - 处理字符串相关的库</li>
  <li>ag - 据说比ack更快的文本搜索工具<code>the_silver_searcher</code>的emacs插件</li>
  <li>ht - 处理哈希相关的库</li>
  <li>anzu - 显示当前匹配文本，预览替换效果和总匹配数的插件</li>
  <li>dash - 常用函数集合</li>
  <li>helm - 方便查找各种文件内容,buffer切换,emacs命令执行等</li>
  <li>jedi - python代码补全，快速需要函数/模块定义的插件</li>
  <li>smex - M-x 的命令行补全的功能</li>
  <li>direx - 展示目录树</li>
  <li>magit - git插件</li>
  <li>slime - commonlisp交互模式</li>
  <li>ac-js2 - js2-mode支持js函数定义查找</li>
  <li>rinari - 依赖,需要安装</li>
  <li>diff-hl - 在行首用颜色表示git状态-只支持图形界面的emacs</li>
  <li>dired-k - 用带不同颜色的高亮显示文件/目录,大小等信息</li>
  <li>bind-key - 本项目绑定快捷键的用法都根据这个包,没有用global-set-key</li>
  <li>css-mode - css-mode</li>
  <li>js2-mode - js-mode的升级版</li>
  <li>web-mode - 前端开发必备, html缩进,支持根据tag/元素/属性/block/dom跳转,语法高亮,支持mako,jinja2等模板</li>
  <li>git-blame - git-blame,单独版</li>
  <li>key-chord - 可以快速按键达到快捷键的作用</li>
  <li>nyan-mode - 一直可爱的小猫</li>
  <li>plim-mode - 我写的编辑plim的major-mode</li>
  <li>powerline - 提供一个漂亮的状态栏</li>
  <li>sass-mode - 编辑sass</li>
  <li>scss-mode - 编辑scss</li>
  <li>sublimity - 在图形界面的emacs能缩小预览代码-sublime-text有类似的插件</li>
  <li>undo-tree - 让undo可视化</li>
  <li>yaml-mode - 编辑yaml</li>
  <li>yasnippet - 一个神奇的模板系统,定义缩写并通过tab键自动帮你展开(一些自动的”填空题”机制)</li>
  <li>drag-stuff - 可以将代码块整体拖动</li>
  <li>helm-swoop - 项目内关键词查找,并能自动跳到对应文件和对应行</li>
  <li>ibuffer-vc - 支持版本空的ibuffer模式</li>
  <li>projectile - 管理项目，可快速访问项目里任何文件，支持全项目关键词搜索 </li>
  <li>coffee-mode - 编辑coffee</li>
  <li>python-mode - 编辑python</li>
  <li>smartparens - 自动括号匹配,可以按块删除,tag跳转</li>
  <li>use-package - 本项目引用包的方式</li>
  <li>crontab-mode - 高亮编辑crontab</li>
  <li>golden-ratio - 黄金分割展示当前window</li>
  <li>helm-ipython - helm的ipython插件</li>
  <li>rainbow-mode - 在代码中通过背景色标示颜色值</li>
  <li>ace-jump-mode - 快速让光标位置到你想去的地方</li>
  <li>expand-region - 按层次块区域选择</li>
  <li>helm-css-scss - helm的css/scss插件</li>
  <li>markdown-mode - 编辑markdown</li>
  <li>switch-window - 可视化切换窗口</li>
  <li>visual-regexp - 可视化正则匹配</li>
  <li>gitconfig-mode - 单独的gitconfig-mode</li>
  <li>gitignore-mode - 单独的gitignore-mode</li>
  <li>helm-descbinds - 让默认的<code>C-h b</code>高亮并且按组分开</li>
  <li>imenu-anywhere - 类似于etag, 可直接跳到对应的标签</li>
  <li>multiple-cursors - 一次编辑多处/行文字</li>
  <li>discover-my-major - 告诉你当前mode的一些说明/快捷键设置</li>
  <li>virtualenvwrapper - virtualenvwrapper</li>
  <li>gitattributes-mode - 独立的gitattributes-mode</li>
  <li>rainbow-delimiters - 对内嵌的括号等pair符号加不同颜色  </li>
  <li>idle-highlight-mode - 在设置的一段设置时间未操作电脑会自动高亮当前关键词,并且全文高亮相同关键词</li>
  <li>exec-path-from-shell - 可以使用$PATH环境变量</li>
  <li>find-file-in-repository - 根据git属性在项目里查找文件</li>
  <li>emmet-mode - 类似于zencoding，但是能编辑css,使用很少的代码就能构造一个复杂的div/css</li>
  <li>browse-kill-ring - 查看最近操作的删除文本,以及恢复后的效果</li>
</ol>

<h4 id="section-3">安装使用</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">curl -fsSkL https://raw.github.com/cask/cask/master/go | python
</span><span class="line">git clone https://github.com/dongweiming/emacs.d .emacs.d
</span><span class="line">cd .emacs.d
</span><span class="line">cask
</span><span class="line">sudo pip install jedi pep8 autopep8 flake8</span></pre></figure></notextile></div>

<h4 id="section-4">快捷键分布</h4>

<p>请参看项目的<a href="https://github.com/dongweiming/emacs.d/blob/master/README.md">README.md</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python的魔法二:开发的'坑']]></title>
    <link href="http://dongweiming.github.com/archives/pythonmo-fa-er/"/>
    <updated>2014-05-08T23:15:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/pythonmo-fa-er</id>
    <content type="html"><![CDATA[<h4 id="python-httpwwwdongwmcomarchivespythonde-mo-fa-python">有了第一篇<a href="http://www.dongwm.com/archives/pythonde-mo-fa/">python的魔法(-)之基础知识</a>, 我们再来说说python开发中的坑</h4>

<h4 id="section">不要使用可变对象作为函数默认值</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">append_to_list</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">def_list</span><span class="o">=</span><span class="p">[]):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="n">def_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">return</span> <span class="n">def_list</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="n">append_to_list</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">my_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">my_other_list</span> <span class="o">=</span> <span class="n">append_to_list</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">my_other_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="c"># 看到了吧，其实我们本来只想生成[2] 但是却把第一次运行的效果页带了进来</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">report_arg</span><span class="p">(</span><span class="n">my_default</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">my_default</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="n">report_arg</span><span class="p">()</span> <span class="c"># 第一次执行</span>
</span><span class="line"><span class="mf">1399562371.32</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c"># 隔了2秒</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">report_arg</span><span class="p">()</span>
</span><span class="line"><span class="mf">1399562371.32</span> <span class="c"># 时间竟然没有变</span>
</span></pre></figure></notextile></div>

<p>这2个例子说明了什么? 字典,集合,列表等等对象是不适合作为函数默认值的. 因为这个默认值实在函数建立的时候就生成了, 每次调用都是用了这个对象的”缓存”. 我在上段时间的分享<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>也说到了这个问题,这个是实际开发遇到的问题，好好检查你学过的代码, 也许只是问题没有暴露</p>

<p>可以这样改:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">def</span> <span class="nf">append_to_list</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">to</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="k">if</span> <span class="n">to</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="n">to</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">to</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">to</span>
</span></pre></figure></notextile></div>

<h4 id="section-1">生成器不保留迭代过后的结果</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">12</span><span class="p">]:</span> <span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="mi">2</span> <span class="ow">in</span> <span class="n">gen</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">13</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="mi">3</span> <span class="ow">in</span> <span class="n">gen</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">14</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">gen</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">15</span><span class="p">]:</span> <span class="bp">False</span> <span class="c"># 1为什么不在gen里面了? 因为调用1-&gt;2,这个时候1已经不在迭代器里面了,被按需生成过了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">gen</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span> <span class="c"># 可以转化成列表，当然a_tuple = tuple(gen) 也可以</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="mi">2</span> <span class="ow">in</span> <span class="n">a_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">22</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="mi">3</span> <span class="ow">in</span> <span class="n">a_list</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">23</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="mi">1</span> <span class="ow">in</span> <span class="n">a_list</span> <span class="c"># 就算循环过,值还在</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">24</span><span class="p">]:</span> <span class="bp">True</span>
</span></pre></figure></notextile></div>

<h4 id="lambda">lambda在闭包中会保存局部变量</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span><span class="p">:</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">30</span><span class="p">]:</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">())</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line"><span class="mi">4</span>
</span></pre></figure></notextile></div>

<p>这个问题还是上面说的<a href="http://dongweiming.github.io/Expert-Python/">python高级编程</a>中说过具体原因. 其实就是当我赋值给my_list的时候,lambda表达式就执行了i会循环,直到 i =4,i会保留</p>

<p>但是可以用生成器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="n">my_gen</span> <span class="o">=</span> <span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">32</span><span class="p">]:</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">my_gen</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">())</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="mi">4</span>
</span></pre></figure></notextile></div>

<p>也可以坚持用list：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">33</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">:</span> <span class="n">x</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span> <span class="c"># 看我给每个lambda表达式赋了默认值</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">34</span><span class="p">]:</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">())</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line"><span class="mi">3</span>
</span><span class="line"><span class="mi">4</span>
</span></pre></figure></notextile></div>

<p>有点不好懂是吧,在看看python的另外一个魔法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">35</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">groupby</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">return</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)]</span><span class="o">*</span><span class="n">size</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="n">groupby</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">9</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span>
</span></pre></figure></notextile></div>

<p>一个分组的函数,看起来很不好懂,对吧? 我们来解析下这里</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">39</span><span class="p">]:</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)]</span><span class="o">*</span><span class="mi">3</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">39</span><span class="p">]:</span>
</span><span class="line"><span class="p">[</span><span class="o">&lt;</span><span class="n">listiterator</span> <span class="n">at</span> <span class="mh">0x10e155fd0</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">listiterator</span> <span class="n">at</span> <span class="mh">0x10e155fd0</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">listiterator</span> <span class="n">at</span> <span class="mh">0x10e155fd0</span><span class="o">&gt;</span><span class="p">]</span> <span class="c"># 看到了吧, 其实就是把items变成可迭代的, 重复三回（同一个对象哦）, 但是别忘了,每次都.next(), 所以起到了分组的作用</span>
</span><span class="line"> <span class="n">In</span> <span class="p">[</span><span class="mi">40</span><span class="p">]:</span> <span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="o">=</span><span class="n">i</span><span class="p">:</span> <span class="n">x</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">40</span><span class="p">]:</span>
</span><span class="line"><span class="p">[</span><span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">,</span>
</span><span class="line"> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__main__</span><span class="o">.&lt;</span><span class="k">lambda</span><span class="o">&gt;&gt;</span><span class="p">]</span> <span class="c"># 看懂了吗?</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">在循环中修改列表项</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">44</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">45</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">a</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">46</span><span class="p">]:</span> <span class="n">a</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">46</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 没有问题</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">50</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">51</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">b</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>      <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>          <span class="n">b</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">52</span><span class="p">]:</span> <span class="n">b</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">52</span><span class="p">]:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 本来我想要的结果应该是去除偶数的列表</span>
</span></pre></figure></notextile></div>

<p>思考一下,为什么 – 是因为你对列表的remove,影响了它的index</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">53</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">54</span><span class="p">]:</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span> <span class="o">%</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">b</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line"><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c"># 这里没有问题 2被删除了</span>
</span><span class="line"><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c"># 因为2被删除目前的列表是[4, 5, 6], 所以索引list[1]直接去找5, 忽略了4</span>
</span><span class="line"><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="indexerror---">IndexError - 列表取值超出了他的索引数</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">55</span><span class="p">]:</span> <span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">56</span><span class="p">]:</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c"># 根本没有这个元素</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">IndexError</span>                                <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">56</span><span class="o">-</span><span class="mo">037</span><span class="n">d00de8360</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="ne">IndexError</span><span class="p">:</span> <span class="nb">list</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span> <span class="c"># 抛异常了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">57</span><span class="p">]:</span> <span class="n">my_list</span><span class="p">[</span><span class="mi">5</span><span class="p">:]</span> <span class="c"># 但是可以这样， 一定要注意, 用好了是trick,用错了就是坑啊</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">57</span><span class="p">]:</span> <span class="p">[]</span>
</span></pre></figure></notextile></div>

<h4 id="section-3">重用全局变量</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">58</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="c"># 我可以先调用一个未定义的变量</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">59</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span> <span class="c"># 后赋值</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">60</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span> <span class="c"># 反正只要调用函数时候变量被定义了就可以了</span>
</span><span class="line"><span class="k">global</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">61</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>     <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">62</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">63</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">64</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class="line"><span class="k">global</span> <span class="c"># 局部变量没有影响到全局变量</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">65</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="c"># 虽然你全局设置这个变量, 但是局部变量有同名的, python以为你忘了定义本地变量了</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">66</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">67</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">UnboundLocalError</span>                         <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">67</span><span class="o">-</span><span class="n">d82eda95de40</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">65</span><span class="o">-</span><span class="mi">0</span><span class="n">ad11d690936</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line">      <span class="mi">1</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">2</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class="line">      <span class="mi">3</span>         <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">      <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="ne">UnboundLocalError</span><span class="p">:</span> <span class="n">local</span> <span class="n">variable</span> <span class="s">&#39;var&#39;</span> <span class="n">referenced</span> <span class="n">before</span> <span class="n">assignment</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">68</span><span class="p">]:</span> <span class="k">def</span> <span class="nf">my_func</span><span class="p">():</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">global</span> <span class="n">var</span> <span class="c"># 这个时候得加全局了</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="c"># 这样就能正常使用</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>         <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;locally changed&#39;</span>
</span><span class="line">   <span class="o">....</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">69</span><span class="p">]:</span> <span class="n">var</span> <span class="o">=</span> <span class="s">&#39;global&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span> <span class="n">my_func</span><span class="p">()</span>
</span><span class="line"><span class="k">global</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
</span><span class="line"><span class="n">locally</span> <span class="n">changed</span> <span class="c"># 但是使用了global就改变了全局变量</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">拷贝可变对象</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">72</span><span class="p">]:</span> <span class="n">my_list1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">73</span><span class="p">]:</span> <span class="n">my_list1</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">73</span><span class="p">]:</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">74</span><span class="p">]:</span> <span class="n">my_list1</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;a&#39;</span> <span class="c"># 我只修改子列表中的一项</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="n">my_list1</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="p">[[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span> <span class="c"># 但是都影响到了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">76</span><span class="p">]:</span> <span class="n">my_list2</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)]</span> <span class="c"># 用这种循环生成不同对象的方法就不影响了</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">77</span><span class="p">]:</span> <span class="n">my_list2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;a&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">78</span><span class="p">]:</span> <span class="n">my_list2</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">78</span><span class="p">]:</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python的魔法(一): 基本知识]]></title>
    <link href="http://dongweiming.github.com/archives/pythonde-mo-fa/"/>
    <updated>2014-05-08T00:40:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/pythonde-mo-fa</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近读了一篇<a href="http://nbviewer.ipython.org/github/rasbt/python_reference/blob/master/not_so_obvious_python_stuff.ipynb">A collection of not-so-obvious Python stuff you should know!</a>,感觉受益颇多. 翻译过来(非直接翻译),再加上一些我的理解和注释. 让大家注意python鲜为人知的”魔法”. 我会分2篇</p>

<h5 id="pythonc3">python多继承(C3)</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">print</span><span class="p">(</span><span class="s">&quot;class A&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>                 <span class="k">print</span><span class="p">(</span><span class="s">&quot;class B&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>         <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">C</span><span class="p">()</span><span class="o">.</span><span class="n">foo</span><span class="p">()</span>
</span><span class="line"><span class="k">class</span> <span class="nc">A</span> <span class="c"># 例子很好懂, C继承了A和B，从左到右,发现A有foo方法,返回了</span>
</span></pre></figure></notextile></div>

<p>看起来都是很简单, 有次序的从底向上,从前向后找,找到就返回. 再看例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>               <span class="k">print</span><span class="p">(</span><span class="s">&quot;class A&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">7</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">A</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>               <span class="k">print</span><span class="p">(</span><span class="s">&quot;class C&quot;</span><span class="p">)</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">8</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">D</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">):</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>        <span class="k">pass</span>
</span><span class="line">   <span class="o">...</span><span class="p">:</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">9</span><span class="p">]:</span> <span class="n">D</span><span class="p">()</span><span class="o">.</span><span class="n">foo</span><span class="p">()</span>
</span><span class="line"><span class="k">class</span> <span class="nc">C</span> <span class="c"># ? 按道理, 顺序是 D-&gt;B-&gt;A,为什么找到了C哪去了</span>
</span></pre></figure></notextile></div>

<p>这也就涉及了MRO(<a href="http://python-history.blogspot.ru/2010/06/method-resolution-order.html">Method Resolution Order</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="n">D</span><span class="o">.</span><span class="n">__mro__</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">10</span><span class="p">]:</span> <span class="p">(</span><span class="n">__main__</span><span class="o">.</span><span class="n">D</span><span class="p">,</span> <span class="n">__main__</span><span class="o">.</span><span class="n">B</span><span class="p">,</span> <span class="n">__main__</span><span class="o">.</span><span class="n">C</span><span class="p">,</span> <span class="n">__main__</span><span class="o">.</span><span class="n">A</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>简单的理解其实就是新式类是广度优先了， D-&gt;B, 但是发现C也是继承A，就先找C，最后再去找A</p>

<h4 id="appendextend">列表的+和+=, append和extend</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">17</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;ID:&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;ID:&#39;</span><span class="p">,</span> <span class="mi">4481323592</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">18</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">19</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;ID (+=):&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;ID (+=):&#39;</span><span class="p">,</span> <span class="mi">4481323592</span><span class="p">)</span> <span class="c"># 使用+= 还是在原来的列表上操作</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">20</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">=</span> <span class="n">a_list</span> <span class="o">+</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">21</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;ID (list = list + ...):&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;ID (list = list + ...):&#39;</span><span class="p">,</span> <span class="mi">4481293056</span><span class="p">)</span> <span class="c"># 简单的+其实已经改变了原有列表</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">28</span><span class="p">]:</span> <span class="n">a_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">29</span><span class="p">]:</span> <span class="mi">4481326976</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">30</span><span class="p">]:</span> <span class="n">a_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">31</span><span class="p">]:</span> <span class="mi">4481326976</span> <span class="c"># append 是在原有列表添加</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">32</span><span class="p">]:</span> <span class="n">a_list</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">33</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">33</span><span class="p">]:</span> <span class="mi">4481326976</span> <span class="c"># extend 也是在原有列表上添加</span>
</span></pre></figure></notextile></div>

<h4 id="datetime">datetime也有布尔值</h4>

<p>这是一个<a href="http://lwn.net/SubscriberLink/590299/bf73fe823974acea/">坑</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">34</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">datetime</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">35</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;&quot;datetime.time(0,0,0)&quot; (Midnight) -&gt;&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;&quot;datetime.time(0,0,0)&quot; (Midnight) -&gt;&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">36</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;&quot;datetime.time(1,0,0)&quot; (1 am) -&gt;&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;&quot;datetime.time(1,0,0)&quot; (1 am) -&gt;&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<h4 id="is-">’==’ 和 is 的区别</h4>
<p>我的理解是”is”是判断2个对象的身份, ==是判断2个对象的值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">37</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">38</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">39</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a is b&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">a</span> <span class="ow">is</span> <span class="n">b</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a is b&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">40</span><span class="p">]:</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">999</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">41</span><span class="p">]:</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">999</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">42</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;c is d&#39;</span><span class="p">,</span> <span class="nb">bool</span><span class="p">(</span><span class="n">c</span> <span class="ow">is</span> <span class="n">d</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;c is d&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="c"># 原因是python的内存管理,缓存了-5 - 256的对象</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">43</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;256 is 257-1&#39;</span><span class="p">,</span> <span class="mi">256</span> <span class="ow">is</span> <span class="mi">257</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;256 is 257-1&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">44</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;257 is 258-1&#39;</span><span class="p">,</span> <span class="mi">257</span> <span class="ow">is</span> <span class="mi">258</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;257 is 258-1&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">45</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;-5 is -6+1&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span> <span class="ow">is</span> <span class="o">-</span><span class="mi">6</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;-5 is -6+1&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">46</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;-7 is -6-1&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">7</span> <span class="ow">is</span> <span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;-7 is -6-1&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">47</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&#39;hello world!&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">48</span><span class="p">]:</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&#39;hello world!&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">49</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a is b,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a is b,&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="c"># 很明显 他们没有被缓存,这是2个字段串的对象</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">50</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a == b,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a == b,&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span> <span class="c"># 但他们的值相同</span>
</span><span class="line"><span class="c"># But, 有个特例</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">51</span><span class="p">]:</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">&#39;nan&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">52</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a is a,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a is a,&#39;</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">53</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;a == a,&#39;</span><span class="p">,</span> <span class="n">a</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;a == a,&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="c"># 亮瞎我眼睛了~</span>
</span></pre></figure></notextile></div>

<h4 id="section-1">浅拷贝和深拷贝</h4>

<p>我们在实际开发中都可以向对某列表的对象做修改,但是可能不希望改动原来的列表. <strong>浅拷贝只拷贝父对象，深拷贝还会拷贝对象的内部的子对象</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">65</span><span class="p">]:</span> <span class="n">list1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">66</span><span class="p">]:</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">list1</span> <span class="c"># 就是个引用, 你操作list2,其实list1的结果也会变</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">67</span><span class="p">]:</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">list1</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">69</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">copy</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">70</span><span class="p">]:</span> <span class="n">list4</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="c"># 他和list3一样 都是浅拷贝</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">list1</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list2</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list3</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list4</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">71</span><span class="p">]:</span> <span class="p">(</span><span class="mi">4480620232</span><span class="p">,</span> <span class="mi">4480620232</span><span class="p">,</span> <span class="mi">4479667880</span><span class="p">,</span> <span class="mi">4494894720</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">72</span><span class="p">]:</span> <span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">73</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">74</span><span class="p">]:</span> <span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">75</span><span class="p">]:</span> <span class="n">list4</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">76</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span> <span class="c"># 对list3和list4操作都没有对list1有影响</span>
</span><span class="line">
</span><span class="line"><span class="c"># 再看看深拷贝和浅拷贝的区别</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">88</span><span class="p">]:</span> <span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">copy</span><span class="p">,</span> <span class="n">deepcopy</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">89</span><span class="p">]:</span> <span class="n">list1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">]]</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">90</span><span class="p">]:</span> <span class="n">list2</span> <span class="o">=</span> <span class="n">copy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="c"># 还是浅拷贝</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">91</span><span class="p">]:</span> <span class="n">list3</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">list1</span><span class="p">)</span> <span class="c"># 深拷贝</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">92</span><span class="p">]:</span> <span class="nb">id</span><span class="p">(</span><span class="n">list1</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list2</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">list3</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">92</span><span class="p">]:</span> <span class="p">(</span><span class="mi">4494896592</span><span class="p">,</span> <span class="mi">4495349160</span><span class="p">,</span> <span class="mi">4494896088</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">93</span><span class="p">]:</span> <span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">94</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">]])</span> <span class="c"># 看到了吧 假如你操作其子对象 还是和引用一样 影响了源</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">95</span><span class="p">]:</span> <span class="n">list3</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">96</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="n">list1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="s">&#39;list1:&#39;</span><span class="p">,</span> <span class="p">[[</span><span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">]])</span> <span class="c"># 深拷贝就不会影响</span>
</span></pre></figure></notextile></div>

<h4 id="boolint">bool其实是int的子类</h4>

<p>这篇<a href="http://www.peterbe.com/plog/bool-is-int">bool-is-int</a>很有趣:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">97</span><span class="p">]:</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">97</span><span class="p">]:</span> <span class="bp">True</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">98</span><span class="p">]:</span> <span class="bp">True</span> <span class="o">+</span> <span class="bp">True</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">98</span><span class="p">]:</span> <span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">99</span><span class="p">]:</span> <span class="mi">3</span> <span class="o">*</span> <span class="bp">True</span> <span class="o">+</span> <span class="bp">True</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">99</span><span class="p">]:</span> <span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">100</span><span class="p">]:</span> <span class="mi">3</span> <span class="o">*</span> <span class="bp">True</span> <span class="o">-</span> <span class="bp">False</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">100</span><span class="p">]:</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">104</span><span class="p">]:</span> <span class="bp">True</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">104</span><span class="p">]:</span> <span class="mi">1024</span>
</span></pre></figure></notextile></div>

<h4 id="section-2">元组是不是真的不可变?</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">111</span><span class="p">]:</span> <span class="n">tup</span> <span class="o">=</span> <span class="p">([],)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">112</span><span class="p">]:</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="o">---------------------------------------------------------------------------</span>
</span><span class="line"><span class="ne">TypeError</span>                                 <span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">ipython</span><span class="o">-</span><span class="nb">input</span><span class="o">-</span><span class="mi">112</span><span class="o">-</span><span class="n">d4f292cf35de</span><span class="o">&gt;</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class="line"><span class="o">----&gt;</span> <span class="mi">1</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;tuple&#39;</span> <span class="nb">object</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">support</span> <span class="n">item</span> <span class="n">assignment</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">113</span><span class="p">]:</span> <span class="n">tup</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">113</span><span class="p">]:</span> <span class="p">([</span><span class="mi">1</span><span class="p">],)</span> <span class="c"># 我靠 又是亮瞎我眼睛,明明抛了异常 还能修改?</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">114</span><span class="p">]:</span> <span class="n">tup</span> <span class="o">=</span> <span class="p">([],)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">115</span><span class="p">]:</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">116</span><span class="p">]:</span> <span class="n">tup</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">116</span><span class="p">]:</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c"># 好吧,我有点看明白了, 虽然我不能直接操作元组，但是不能阻止我操作元组中可变的子对象(list)</span>
</span></pre></figure></notextile></div>

<p>这里有个不错的解释<a href="http://emptysqua.re/blog/python-increment-is-weird-part-ii/">Python’s += Is Weird, Part II </a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">117</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">118</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">119</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="n">my_tup</span> <span class="o">+</span> <span class="p">(</span><span class="mi">5</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">120</span><span class="p">]:</span> <span class="n">my_tup</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">120</span><span class="p">]:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c"># ? 嗯 不是不能操作元组嘛?</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">121</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">122</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">my_tup</span><span class="p">))</span>
</span><span class="line"><span class="mi">4481317904</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">123</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">124</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">my_tup</span><span class="p">))</span>
</span><span class="line"><span class="mi">4480606864</span> <span class="c"># 操作的不是原来的元组 所以可以</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">125</span><span class="p">]:</span> <span class="n">my_tup</span> <span class="o">=</span> <span class="n">my_tup</span> <span class="o">+</span> <span class="p">(</span><span class="mi">5</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">126</span><span class="p">]:</span> <span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">my_tup</span><span class="p">))</span>
</span><span class="line"><span class="mi">4474234912</span>
</span></pre></figure></notextile></div>

<h4 id="python-">python没有私有方法/变量? 但是可以有”伪”的</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">127</span><span class="p">]:</span> <span class="k">class</span> <span class="nc">my_class</span><span class="p">(</span><span class="nb">object</span><span class="o">^</span><span class="n">E</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">public_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello public world!&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">__private_method</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c"># 私有以双下划线开头</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello private world!&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">def</span> <span class="nf">call_private_method_in_class</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="bp">self</span><span class="o">.</span><span class="n">__private_method</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">132</span><span class="p">]:</span> <span class="n">my_instance</span> <span class="o">=</span> <span class="n">my_class</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">133</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">public_method</span><span class="p">()</span>
</span><span class="line"><span class="n">Hello</span> <span class="n">public</span> <span class="n">world</span><span class="err">!</span> <span class="c"># 普通方法</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">134</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">_my_class__private_method</span><span class="p">()</span>
</span><span class="line"><span class="n">Hello</span> <span class="n">private</span> <span class="n">world</span><span class="err">!</span> <span class="c"># 私有的可以加&quot;_ + 类名字 + 私有方法名字”</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">135</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">call_private_method_in_class</span><span class="p">()</span>
</span><span class="line"><span class="n">Hello</span> <span class="n">private</span> <span class="n">world</span><span class="err">!</span> <span class="c"># 还可以通过类提供的公有接口内部访问</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">136</span><span class="p">]:</span> <span class="n">my_instance</span><span class="o">.</span><span class="n">_my_class__private_variable</span>
</span><span class="line"><span class="n">Out</span><span class="p">[</span><span class="mi">136</span><span class="p">]:</span> <span class="mi">1</span>
</span></pre></figure></notextile></div>

<h4 id="else">异常处理加else</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">150</span><span class="p">]:</span> <span class="k">try</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;third element:&#39;</span><span class="p">,</span> <span class="n">a_list</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;raised IndexError&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;no error in try-block&#39;</span><span class="p">)</span> <span class="c"># 只有在try里面没有异常的时候才会执行else里面的表达式</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="n">raised</span> <span class="ne">IndexError</span> <span class="c"># 抛异常了 没完全完成</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">153</span><span class="p">]:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">154</span><span class="p">]:</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>     <span class="k">print</span><span class="p">(</span><span class="s">&#39;in else&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="ow">in</span> <span class="k">else</span> <span class="c"># while也支持哦~</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">155</span><span class="p">]:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">156</span><span class="p">]:</span> <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">break</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;completed while-loop&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span> <span class="c"># 被break了 没有完全执行完 就不执行else里面的了</span>
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">158</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;completed for-loop&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span>
</span><span class="line"><span class="mi">1</span>
</span><span class="line"><span class="n">completed</span> <span class="k">for</span><span class="o">-</span><span class="n">loop</span>
</span><span class="line">
</span><span class="line"><span class="n">In</span> <span class="p">[</span><span class="mi">159</span><span class="p">]:</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">break</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span> <span class="k">else</span><span class="p">:</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>         <span class="k">print</span><span class="p">(</span><span class="s">&#39;completed for-loop&#39;</span><span class="p">)</span>
</span><span class="line">   <span class="o">.....</span><span class="p">:</span>
</span><span class="line"><span class="mi">0</span> <span class="c"># 也是因为break了</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[线程锁的一个大坑]]></title>
    <link href="http://dongweiming.github.com/archives/xian-cheng-suo-de-%5B%3F%5D-ge-da-keng/"/>
    <updated>2014-04-18T16:56:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/xian-cheng-suo-de-[?]-ge-da-keng</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>原来的一位同事@炮哥, 昨天在QQ问我: “想请教下一个线程获得lock之后，也可能被其他的线程释放掉？这个是因为线程之间的资源是共享的吗？这样的话普通的thread lock 都是不安全的了？”. 我第一反应就是怎么可能:’谁加锁谁解锁呗,别的线程怎么能解锁？’</p>

<p>炮哥发来一段python官网的文档说明:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">A factory function that returns a new primitive lock object. Once a thread has acquired it, subsequent attempts to acquire it block, until it is released; any thread may release it.</span></pre></figure></notextile></div>

<p>最有最后一句前是分号. 简单地说,一个线程获取锁, 以后的尝试获取都会被阻塞,除非它会释放. 但是<strong>同时</strong>其他其他线程可以释放</p>

<p>好,写个例子验证下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">import threading
</span><span class="line">import time
</span><span class="line">
</span><span class="line">lock = threading.Lock()
</span><span class="line">
</span><span class="line">def lock_holder(lock):
</span><span class="line">    print('Starting')
</span><span class="line">    while True:
</span><span class="line">        lock.acquire()
</span><span class="line">        print('Holding')
</span><span class="line">        time.sleep(100)
</span><span class="line">        print('Sleep done')
</span><span class="line">
</span><span class="line">def lock_release(lock):
</span><span class="line">    time.sleep(1) # 保证顺序
</span><span class="line">    lock.release()
</span><span class="line">    print('Release it')
</span><span class="line">
</span><span class="line">
</span><span class="line">holder = threading.Thread(target=lock_holder, args=(lock,), name='LockHolder')
</span><span class="line">holder.setDaemon(True)
</span><span class="line">holder.start()
</span><span class="line">
</span><span class="line">#lock_release(lock)
</span><span class="line">release = threading.Thread(target=lock_release, args=(lock,), name='release')
</span><span class="line">release.start()
</span><span class="line">
</span><span class="line">holder = threading.Thread(target=lock_holder, args=(lock,), name='LockHolder')
</span><span class="line">holder.setDaemon(True)
</span><span class="line">holder.start()</span></pre></figure></notextile></div>

<p>奇迹发生了…. 线程b果然可以释放线程a的锁,颠覆人生观啊.</p>

<p>PS: 但是Rlock不会被其他线程释放,因为它记录该线程的所有者</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[speakerdeck]]></title>
    <link href="http://dongweiming.github.com/archives/speakerdeck/"/>
    <updated>2014-04-18T16:49:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/speakerdeck</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>今天是在Ad的最后一天,本来准备了一个分享.关于业务中一些吐槽和我一些trick的用法, 有兴趣的可以下载<a href="https://github.com/dongweiming/speakerdeck">speakerdeck</a></p>

<h4 id="section-1">主题</h4>

<ol>
  <li>celery celery2/celery3, py-amqp, kombu的用法, celery和djangocelery的集合</li>
  <li>expect 使用expect自动登录复杂的服务器</li>
  <li>mapreduce 一个并行处理文件的例子,说明使用python跑mapreduce多么厉害</li>
  <li>portforward 端口转发</li>
  <li>restapi 我眼中的restapi(pdf)</li>
  <li>tornado 使用tornado一部非阻塞</li>
</ol>

<p>演示的tmux脚本:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">#!/bin/bash
</span><span class="line">SESSION=$USER
</span><span class="line">COMMAND='http Space http://localhost:8000/sleep'
</span><span class="line">
</span><span class="line">tmux new-session -d -s $SESSION
</span><span class="line">
</span><span class="line">tmux new-window -t $SESSION -n 'Logs'
</span><span class="line">tmux split-window -h
</span><span class="line">tmux select-pane -t 0
</span><span class="line">tmux send-keys $COMMAND C-m
</span><span class="line">tmux select-pane -t 1
</span><span class="line">tmux send-keys $COMMAND C-m
</span><span class="line">tmux split-window -v
</span><span class="line">tmux send-keys $COMMAND C-m
</span><span class="line">tmux select-pane -t 0
</span><span class="line">tmux split-window -v
</span><span class="line">tmux send-keys $COMMAND C-m
</span><span class="line"># Attach to session
</span><span class="line">tmux attach-session -t $SESSION</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享一个准备给公司讲python高级编程的slide]]></title>
    <link href="http://dongweiming.github.com/archives/fen-xiang-%5B%3F%5D-ge-zhun-bei-gei-gong-si-jiang-pythongao-ji-bian-cheng-de-slide/"/>
    <updated>2014-04-04T11:07:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/fen-xiang-[?]-ge-zhun-bei-gei-gong-si-jiang-pythongao-ji-bian-cheng-de-slide</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>我以前在学习python模块的时候,曾经翻译<a href="http://pymotw.com/2/py-modindex.html#">pymotw</a>的文章,其实还是有抄袭的嫌疑,从最近开始逐渐直接阅读python标准库源码, 收获颇多. 我现在不愿意教一些从网上或者书里提到的知识点,而更愿意根据我工作中常见的需求去挖掘对应的python的解法.也是在过程中对一些东西有了比较深的理解. 这个ppt是从<a href="https://linuxtoy.org/archives/using-cli-like-a-hacker.html">像黑客一样使用 Linux 命令行</a>获得的灵感. 然后角度为<python高级编程>, 还用到了webfonts娃娃体^.^</python高级编程></p>

<p><img src="https://dl.dropboxusercontent.com/u/95512723/images/expert_python.png" alt="" /></p>

<p>PS: 特别推荐github上看到的”雨痕”的<a href="https://github.com/qyuhen/book">学习笔记</a>. 建议大家都好好看看.</p>

<h4 id="section-1">找到它</h4>

<p><a href="http://dongweiming.github.io/Expert-Python">Expert-Python</a>
或者直接下载代码: <a href="https://github.com/dongweiming/Expert-Python">github</a></p>

<p>但是注意我的字体内嵌项目里面, 请注意流量,避免移动设备直接访问或者强制刷新</p>

<h4 id="section-2">目录</h4>

<ol>
  <li>XX不理解python竟然没有end….</li>
  <li>设置全局变量</li>
  <li>字符串格式化</li>
  <li>操作列表</li>
  <li>操作字典</li>
  <li>字典视图</li>
  <li>vars</li>
  <li>from <strong>future</strong> import unicode_literals</li>
  <li>from <strong>future</strong> import absolute_import</li>
  <li>不是支持了绝对引入,而是拒绝隐式引入</li>
  <li>我靠,我的需求呢? – 在很多开源项目是拒绝你第一次的隐式用法的,</li>
  <li>一个关于编码的问题</li>
  <li>原因是: encoding_example里面没有对文字自动转化为unicode,默认是ascii编码</li>
  <li>super 当子类调用父类属性时一般的做法是这样</li>
  <li>super的一种用法</li>
  <li>假如不用super会这么惨</li>
  <li>手写一个迭代器</li>
  <li>标准迭代器</li>
  <li>生成器</li>
  <li>斐波那契数列</li>
  <li>其实yield和协程关系很密切</li>
  <li>来个回调(阻塞的)</li>
  <li>来个回调(异步的)</li>
  <li>看到这里, 就得说说contextmanager</li>
  <li>包导入</li>
  <li>包构建__all__</li>
  <li>包构建__path__</li>
  <li>静态方法和类方法的区别</li>
  <li>静态方法和类方法的区别其实是在这里</li>
  <li>__slots__</li>
  <li>Packaging Tools的未来</li>
  <li>wheel(即将替代Eggs的二进制包格式)的优点</li>
  <li>装饰器</li>
  <li>给函数的类装饰器</li>
  <li>给类的函数装饰器</li>
  <li>带参数的装饰器</li>
  <li>@property</li>
  <li>@property的另外使用方法</li>
  <li>元类是什么</li>
  <li>模拟生成一个类</li>
  <li>元类: __metaclass__(实现前面的Hello类)</li>
  <li>一个难懂的元类</li>
  <li>描述符</li>
  <li>模块: itertools</li>
  <li>模块: collections(一)</li>
  <li>模块: collections(二)</li>
  <li>模块: collections(三)</li>
  <li>模块: collections(四)</li>
  <li>operator模块(一)</li>
  <li>operator模块(二)</li>
  <li>operator模块(三)</li>
  <li>functools模块之partial</li>
  <li>functools模块之wraps</li>
  <li>functools模块之cmp_to_key</li>
  <li>functools模块之total_ordering</li>
  <li>开发陷阱(一) 可变默认参数</li>
  <li>开发陷阱(二) 闭包变量绑定</li>
  <li>开发陷阱(二) 闭包应该的用法</li>
  <li>在合适的地方用合适的技巧</li>
  <li>不是它不好,而是你没有用好</li>
  <li>ipython的技巧(一)</li>
  <li>ipython的技巧(二)</li>
  <li>联系方式</li>
</ol>

<h4 id="update-20140411">UPDATE 2014.04.11</h4>

<p>今天下午分享了这个ppt. 并且用quicktime录像. 想听的可以从<a href="http://pan.baidu.com/s/1bnnaJaZ">百度网盘</a>下载或者在线看(793.6M). 时长2小时零一分.</p>

<p>中间有个列表去重. 有同学说去重后无法保证第一次出现重复数据位置的顺序.</p>

<p>刚才想起来试了一下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span><span class="line">    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="p">{}</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class="line">    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>  <span class="c"># 注意这个和上面结果是一样的,也就是内部实现的去重原理相同</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">]</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
</span><span class="line">    <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">]</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="p">{}</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
</span><span class="line">    <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">]</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
</span><span class="line">    <span class="o">&gt;&gt;&gt;</span> <span class="n">OrderedDict</span><span class="p">()</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>  <span class="c"># 只能使用这样的方法实现保证顺序的实现</span>
</span><span class="line">    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>                                 <span class="c"># 感谢@杨博的提醒</span>
</span></pre></figure></notextile></div>
<p>新的PYPI的DEMO: <a href="http://pypi-preview.a.ssl.fastly.net">http://pypi-preview.a.ssl.fastly.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用grafana和Diamond构建Graphite监控系统]]></title>
    <link href="http://dongweiming.github.com/archives/shi-yong-grafanahe-diamondgou-jian-graphitejian-kong-xi-tong/"/>
    <updated>2014-04-01T13:56:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/shi-yong-grafanahe-diamondgou-jian-graphitejian-kong-xi-tong</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>在豆瓣开源项目里面有个<a href="https://github.com/douban/graph-index">graph-index</a>, 提供监控服务器的状态的目录索引,基于<a href="https://github.com/vimeo/graph-explorer">graph-explorer</a>. 类似衍生物很多,就包括我要说的本文用到的项目.先看看我的测试环境的几个截图</p>

<p><img src="https://dl.dropboxusercontent.com/u/95512723/images/040101.png" alt="" />
<img src="https://dl.dropboxusercontent.com/u/95512723/images/040102.png" alt="" /></p>

<h4 id="section-1">一些关键词说明</h4>

<ol>
  <li>graphite-web # graphite组件之一, 提供一个django的可以高度扩展的实时画图系统</li>
  <li>Whisper # graphite组件之一, 实现数据库存储. 它比rrdtool要慢，因为whisper是使用python写的，而rrdtool是使用C写的。然而速度之间的差异很小</li>
  <li>Carbon # 数据收集的结果会传给它, 它会解析数据让它可用于实时绘图. 它默认可会提示一些类型的数据,监听2003和2004端口</li>
  <li><a href="https://github.com/BrightcoveOS/Diamond">Diamond</a> # 他是一个提供了大部分数据收集结果功能的结合,类似cpu, load, memory以及mongodb,rabbitmq,nginx等指标.这样就不需要我大量的写各种类型,因为它都已经提供,并且它提供了可扩展的自定义类型(最后我会展示一个我自己定义的类型)</li>
  <li><a href="https://github.com/torkelo/grafana">grafana</a> # 这个面板是基于node, <a href="https://github.com/elasticsearch/kibana">kibana</a>,并且可以在线编辑. 因为是kibana,所以也用到了开元搜索框架<a href="https://github.com/elasticsearch/elasticsearch">elasticsearch</a></li>
</ol>

<p>PS: 其他工具可以参考这里<a href="http://graphite.readthedocs.org/en/1.0/tools.html">Tools That Work With Graphite</a></p>

<h4 id="section-2">原理解析</h4>

<p>我没有看实际全部代码,大概的流程是这样的:</p>

<ol>
  <li>启动Carbon-cache等待接收数据(carbon用的是twisted)</li>
  <li>启动graphite-web给grafana提供实时绘图数据api</li>
  <li>启动grafana,调用graphite-web接口获取数据展示出来</li>
  <li>Diamond定期获取各类要监测的类型数据发给carbon(默认是5分钟,默认一小时自动重载一次配置)</li>
</ol>

<h4 id="section-3">实现我这个系统需要做的事情</h4>

<h5 id="graphitecentos">安装graphite相关组件(我这里用的是centos)</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">yum --enablerepo=epel install graphite-web python-carbon -y</span></pre></figure></notextile></div>

<h6 id="grafana">安装grafana需要的组件</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line"># 增加elasticsearch的repo:
</span><span class="line">sudo  rpm --import http://packages.elasticsearch.org/GPG-KEY-elasticsearch
</span><span class="line">$cat /etc/yum.repos.d/elasticsearch.repo
</span><span class="line">[elasticsearch-1.0]
</span><span class="line">name=Elasticsearch repository for 1.0.x packages
</span><span class="line">baseurl=http://packages.elasticsearch.org/elasticsearch/1.0/centos
</span><span class="line">gpgcheck=1
</span><span class="line">gpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch
</span><span class="line">enabled=1
</span><span class="line">sudo yum install nginx nodejs npm java-1.7.0-openjdk elasticsearch -y</span></pre></figure></notextile></div>

<h5 id="diamondgrafana">下载Diamond和grafana</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">git clone https://github.com/torkelo/grafana
</span><span class="line">cd grafana
</span><span class="line">sudo npm install
</span><span class="line">sudo pip install django-cors-headers configobj # 这可能因为我环境中已经有了一些模块，看缺什么安装什么
</span><span class="line">git clone https://github.com/BrightcoveOS/Diamond
</span><span class="line">cd Diamond</span></pre></figure></notextile></div>
<p>##### 开始修改配置</p>

<ol>
  <li>添加cors支持</li>
</ol>

<p>在/usr/lib/python2.6/site-packages/graphite/app_settings.py:</p>

<p>INSTALLED_APPS里面添加corsheaders, MIDDLEWARE_CLASSES里面添加’corsheaders.middleware.CorsMiddleware’</p>

<ol>
  <li>使用nginx使用grafana</li>
</ol>

<p>在nginx.conf 添加类型的一段配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">server {
</span><span class="line">  listen                *:80 ;
</span><span class="line">
</span><span class="line">  server_name           monitor.dongwm.com; # 我用了虚拟主机
</span><span class="line">  access_log            /var/log/nginx/kibana.myhost.org.access.log;
</span><span class="line">
</span><span class="line">  location / {
</span><span class="line">    add_header 'Access-Control-Allow-Origin' "$http_origin";
</span><span class="line">    add_header 'Access-Control-Allow-Credentials' 'true';
</span><span class="line">    root  /home/operation/dongwm/grafana/src;
</span><span class="line">    index  index.html  index.htm;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  location ~ ^/_aliases$ {
</span><span class="line">    proxy_pass http://127.0.0.1:9200;
</span><span class="line">    proxy_read_timeout 90;
</span><span class="line">  }
</span><span class="line">  location ~ ^/_nodes$ {
</span><span class="line">    proxy_pass http://127.0.0.1:9200;
</span><span class="line">    proxy_read_timeout 90;
</span><span class="line">  }
</span><span class="line">  location ~ ^/.*/_search$ {
</span><span class="line">    proxy_pass http://127.0.0.1:9200;
</span><span class="line">    proxy_read_timeout 90;
</span><span class="line">  }
</span><span class="line">  location ~ ^/.*/_mapping$ {
</span><span class="line">    proxy_pass http://127.0.0.1:9200;
</span><span class="line">    proxy_read_timeout 90;
</span><span class="line">  }
</span><span class="line">
</span><span class="line">  # Password protected end points
</span><span class="line">  location ~ ^/kibana-int/dashboard/.*$ {
</span><span class="line">    proxy_pass http://127.0.0.1:9200;
</span><span class="line">    proxy_read_timeout 90;
</span><span class="line">    limit_except GET {
</span><span class="line">      proxy_pass http://127.0.0.1:9200;
</span><span class="line">      auth_basic "Restricted";
</span><span class="line">      auth_basic_user_file /etc/nginx/conf.d/dongwm.htpasswd;
</span><span class="line">    }
</span><span class="line">  }
</span><span class="line">  location ~ ^/kibana-int/temp.*$ {
</span><span class="line">    proxy_pass http://127.0.0.1:9200;
</span><span class="line">    proxy_read_timeout 90;
</span><span class="line">    limit_except GET {
</span><span class="line">      proxy_pass http://127.0.0.1:9200;
</span><span class="line">      auth_basic "Restricted";
</span><span class="line">      auth_basic_user_file /etc/nginx/conf.d/dongwm.htpasswd;
</span><span class="line">    }
</span><span class="line">  }</span></pre></figure></notextile></div>

<ol>
  <li>修改grafana的src/config.js:</li>
</ol>

<p>graphiteUrl: “http://”+window.location.hostname+”:8020”, # 下面会定义graphite-web启动在8020端口</p>

<ol>
  <li>修改Diamond的配置conf/diamond.conf</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">cp conf/diamond.conf.example conf/diamond.conf</span></pre></figure></notextile></div>

<p>主要修改监听的carbon服务器和端口,以及要监控什么类型的数据,看我的一个全文配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">################################################################################
</span><span class="line"># Diamond Configuration File
</span><span class="line">################################################################################
</span><span class="line">
</span><span class="line">################################################################################
</span><span class="line">### Options for the server
</span><span class="line">[server]
</span><span class="line">
</span><span class="line"># Handlers for published metrics.
</span><span class="line">handlers = diamond.handler.graphite.GraphiteHandler, diamond.handler.archive.ArchiveHandler
</span><span class="line">
</span><span class="line"># User diamond will run as
</span><span class="line"># Leave empty to use the current user
</span><span class="line">user =
</span><span class="line">
</span><span class="line"># Group diamond will run as
</span><span class="line"># Leave empty to use the current group
</span><span class="line">group =
</span><span class="line">
</span><span class="line"># Pid file
</span><span class="line">pid_file = /home/dongwm/logs/diamond.pid # 换了pid的地址,因为我的服务都不会root启动
</span><span class="line">
</span><span class="line"># Directory to load collector modules from
</span><span class="line">collectors_path = /home/dongwm/Diamond/src/collectors # 收集器的目录,这个/home/dongwm/Diamond就是克隆代码的地址
</span><span class="line">
</span><span class="line"># Directory to load collector configs from
</span><span class="line">collectors_config_path = /home/dongwm/Diamond/src/collectors
</span><span class="line">
</span><span class="line"># Directory to load handler configs from
</span><span class="line">handlers_config_path = /home/dongwm/Diamond/src/diamond/handler
</span><span class="line">
</span><span class="line">handlers_path = /home/dongwm/Diamond/src/diamond/handler
</span><span class="line">
</span><span class="line"># Interval to reload collectors
</span><span class="line">collectors_reload_interval = 3600 # 收集器定期会重载看有没有配置更新
</span><span class="line">
</span><span class="line">################################################################################
</span><span class="line">### Options for handlers
</span><span class="line">[handlers]
</span><span class="line">
</span><span class="line"># daemon logging handler(s)
</span><span class="line">keys = rotated_file
</span><span class="line">
</span><span class="line">### Defaults options for all Handlers
</span><span class="line">[[default]]
</span><span class="line">
</span><span class="line">[[ArchiveHandler]]
</span><span class="line">
</span><span class="line"># File to write archive log files
</span><span class="line">log_file = /home/dongwm/logs/diamond_archive.log
</span><span class="line">
</span><span class="line"># Number of days to keep archive log files
</span><span class="line">days = 7
</span><span class="line">
</span><span class="line">[[GraphiteHandler]]
</span><span class="line">### Options for GraphiteHandler
</span><span class="line">
</span><span class="line"># Graphite server host
</span><span class="line">host = 123.126.1.11
</span><span class="line">
</span><span class="line"># Port to send metrics to
</span><span class="line">port = 2003
</span><span class="line">
</span><span class="line"># Socket timeout (seconds)
</span><span class="line">timeout = 15
</span><span class="line">
</span><span class="line"># Batch size for metrics
</span><span class="line">batch = 1
</span><span class="line">
</span><span class="line">[[GraphitePickleHandler]]
</span><span class="line">### Options for GraphitePickleHandler
</span><span class="line">
</span><span class="line"># Graphite server host
</span><span class="line">host = 123.126.1.11
</span><span class="line">
</span><span class="line"># Port to send metrics to
</span><span class="line">port = 2004
</span><span class="line">
</span><span class="line"># Socket timeout (seconds)
</span><span class="line">timeout = 15
</span><span class="line">
</span><span class="line"># Batch size for pickled metrics
</span><span class="line">batch = 256
</span><span class="line">
</span><span class="line">[[MySQLHandler]]
</span><span class="line">### Options for MySQLHandler
</span><span class="line">
</span><span class="line"># MySQL Connection Info 这个可以你的会不同
</span><span class="line">hostname    = 127.0.0.1
</span><span class="line">port        = 3306
</span><span class="line">username    = root
</span><span class="line">password    =
</span><span class="line">database    = diamond
</span><span class="line">table       = metrics
</span><span class="line"># INT UNSIGNED NOT NULL
</span><span class="line">col_time    = timestamp
</span><span class="line"># VARCHAR(255) NOT NULL
</span><span class="line">col_metric  = metric
</span><span class="line"># VARCHAR(255) NOT NULL
</span><span class="line">col_value   = value
</span><span class="line">
</span><span class="line">[[StatsdHandler]]
</span><span class="line">host = 127.0.0.1
</span><span class="line">port = 8125
</span><span class="line">
</span><span class="line">[[TSDBHandler]]
</span><span class="line">host = 127.0.0.1
</span><span class="line">port = 4242
</span><span class="line">timeout = 15
</span><span class="line">
</span><span class="line">[[LibratoHandler]]
</span><span class="line">user = user@example.com
</span><span class="line">apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01
</span><span class="line">
</span><span class="line">[[HostedGraphiteHandler]]
</span><span class="line">apikey = abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01
</span><span class="line">timeout = 15
</span><span class="line">batch = 1
</span><span class="line">
</span><span class="line"># And any other config settings from GraphiteHandler are valid here
</span><span class="line">
</span><span class="line">[[HttpPostHandler]]
</span><span class="line">
</span><span class="line">### Urp to post the metrics
</span><span class="line">url = http://localhost:8888/
</span><span class="line">### Metrics batch size
</span><span class="line">batch = 100
</span><span class="line">
</span><span class="line">
</span><span class="line">################################################################################
</span><span class="line">### Options for collectors
</span><span class="line">[collectors]
</span><span class="line">[[TencentCollector]] # 本来[collectors]下试没有东西的,这个是我定制的一个类型
</span><span class="line">ttype = server
</span><span class="line">[[MongoDBCollector]] # 一般情况,有一些类型是默认enabled = True,也就是启动的,但是大部分是默认不启动《需要显示指定True
</span><span class="line">enabled = True
</span><span class="line">host = 127.0.0.1 # 每种类型的参数不同
</span><span class="line">[[TCPCollector]]
</span><span class="line">enabled = True
</span><span class="line">[[NetworkCollector]]
</span><span class="line">enabled = True
</span><span class="line">[[NginxCollector]]
</span><span class="line">enabled = False # 没开启nginx_status 开启了也没用
</span><span class="line">[[ SockstatCollector]]
</span><span class="line">enabled = True
</span><span class="line">[[default]]
</span><span class="line">### Defaults options for all Collectors
</span><span class="line">
</span><span class="line"># Uncomment and set to hardcode a hostname for the collector path
</span><span class="line"># Keep in mind, periods are seperators in graphite
</span><span class="line"># hostname = my_custom_hostname
</span><span class="line">
</span><span class="line"># If you prefer to just use a different way of calculating the hostname
</span><span class="line"># Uncomment and set this to one of these values:
</span><span class="line">
</span><span class="line"># smart             = Default. Tries fqdn_short. If that's localhost, uses hostname_short
</span><span class="line">
</span><span class="line"># fqdn_short        = Default. Similar to hostname -s
</span><span class="line"># fqdn              = hostname output
</span><span class="line"># fqdn_rev          = hostname in reverse (com.example.www)
</span><span class="line">
</span><span class="line"># uname_short       = Similar to uname -n, but only the first part
</span><span class="line"># uname_rev         = uname -r in reverse (com.example.www)
</span><span class="line">
</span><span class="line"># hostname_short    = `hostname -s`
</span><span class="line"># hostname          = `hostname`
</span><span class="line"># hostname_rev      = `hostname` in reverse (com.example.www)
</span><span class="line">
</span><span class="line"># hostname_method = smart
</span><span class="line">
</span><span class="line"># Path Prefix and Suffix
</span><span class="line"># you can use one or both to craft the path where you want to put metrics
</span><span class="line"># such as: %(path_prefix)s.$(hostname)s.$(path_suffix)s.$(metric)s
</span><span class="line"># path_prefix = servers
</span><span class="line"># path_suffix =
</span><span class="line">
</span><span class="line"># Path Prefix for Virtual Machines
</span><span class="line"># If the host supports virtual machines, collectors may report per
</span><span class="line"># VM metrics. Following OpenStack nomenclature, the prefix for
</span><span class="line"># reporting per VM metrics is "instances", and metric foo for VM
</span><span class="line"># bar will be reported as: instances.bar.foo...
</span><span class="line"># instance_prefix = instances
</span><span class="line">
</span><span class="line"># Default Poll Interval (seconds)
</span><span class="line"># interval = 300
</span><span class="line">
</span><span class="line">################################################################################
</span><span class="line">### Options for logging
</span><span class="line"># for more information on file format syntax:
</span><span class="line"># http://docs.python.org/library/logging.config.html#configuration-file-format
</span><span class="line">
</span><span class="line">[loggers]
</span><span class="line">
</span><span class="line">keys = root
</span><span class="line">
</span><span class="line"># handlers are higher in this config file, in:
</span><span class="line"># [handlers]
</span><span class="line"># keys = ...
</span><span class="line">
</span><span class="line">[formatters]
</span><span class="line">
</span><span class="line">keys = default
</span><span class="line">
</span><span class="line">[logger_root]
</span><span class="line">
</span><span class="line"># to increase verbosity, set DEBUG
</span><span class="line">level = INFO
</span><span class="line">handlers = rotated_file
</span><span class="line">propagate = 1
</span><span class="line">
</span><span class="line">[handler_rotated_file]
</span><span class="line">
</span><span class="line">class = handlers.TimedRotatingFileHandler
</span><span class="line">level = DEBUG
</span><span class="line">formatter = default
</span><span class="line"># rotate at midnight, each day and keep 7 days
</span><span class="line">args = ('/home/dongwm/logs/diamond.log', 'midnight', 1, 7)
</span><span class="line">
</span><span class="line">[formatter_default]
</span><span class="line">
</span><span class="line">format = [%(asctime)s] [%(threadName)s] %(message)s
</span><span class="line">datefmt =</span></pre></figure></notextile></div>

<h5 id="section-4">启动相关服务</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">sudo /etc/init.d/nginx reload
</span><span class="line">sudo /sbin/chkconfig --add elasticsearch
</span><span class="line">sudo service elasticsearch start
</span><span class="line">sudo service carbon-cache restart
</span><span class="line">sudo python /usr/lib/python2.6/site-packages/graphite/manage.py runserver 0.0.0.0:8020 # 启动graphite-web到8020端口</span></pre></figure></notextile></div>

<h6 id="agentdiamond">在每个要搜集信息的agent上面安装Diamond,并启动:</h6>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">cd /home/dongm/Diamond
</span><span class="line">python ./bin/diamond --configfile=conf/diamond.conf
</span><span class="line">
</span><span class="line"># PS: 也可以添加 -l -f在前台显示</span></pre></figure></notextile></div>

<h5 id="tencentcollector">自定义数据搜集类型，也就是上面的TencentCollector</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line"># coding=utf-8 
</span><span class="line">
</span><span class="line">"""
</span><span class="line">获取腾讯微博爬虫的业务指标
</span><span class="line">"""
</span><span class="line">
</span><span class="line">import diamond.collector
</span><span class="line">import pymongo
</span><span class="line">from pymongo.errors import ConnectionFailure
</span><span class="line">
</span><span class="line">
</span><span class="line">class TencentCollector(diamond.collector.Collector): # 需要继承至diamond.collector.Collector
</span><span class="line">    PATH = '/home/dongwm/tencent_data'
</span><span class="line">    
</span><span class="line">    def get_default_config(self):
</span><span class="line">        config = super(TencentCollector, self).get_default_config()
</span><span class="line">        config.update({
</span><span class="line">            'enabled':  'True',
</span><span class="line">            'path':     'tencent',
</span><span class="line">            'method':   'Threaded',
</span><span class="line">            'ttype':    'agent' # 服务类型 包含agent和server
</span><span class="line">        })
</span><span class="line">        return config
</span><span class="line">
</span><span class="line">    def collect(self):
</span><span class="line">        ttype = self.config['ttype']
</span><span class="line">        if ttype == 'server':
</span><span class="line">            try:
</span><span class="line">                db = pymongo.MongoClient()['tmp']
</span><span class="line">            except ConnectionFailure:
</span><span class="line">                return
</span><span class="line">            now_count = db.data.count()
</span><span class="line">            try:
</span><span class="line">                last_count = db.diamond.find_and_modify(
</span><span class="line">                    {}, {'$set': {'last': now_count}}, upsert=True)['last']
</span><span class="line">            except TypeError:
</span><span class="line">                last_count = 0
</span><span class="line">            self.publish('count', now_count)
</span><span class="line">            self.publish('update', abs(last_count - now_count))
</span><span class="line">        if ttype == 'agent':
</span><span class="line">            # somethings..........</span></pre></figure></notextile></div>

<h5 id="grafana-rowpanelmetric">添加你要绘图的类型. 这个就是打开grafana, 添加不同的row.给每个添加panel.选择metric的类型就好了</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搜集系统信息的dashboard]]></title>
    <link href="http://dongweiming.github.com/archives/sou-ji-xi-tong-xin-xi-de-dashboard/"/>
    <updated>2014-02-09T22:21:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/sou-ji-xi-tong-xin-xi-de-dashboard</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>过年在家无聊, 发现个挺有意思的项目: <a href="https://github.com/afaqurk/linux-dash">linux-dash</a>,就是使用Twitter的Bootstrap做的管理模板,可以显示服务器信息, 负载, 内存,进程,硬盘,用户,安装/未安装的软件信息,网卡IP,网速,以及网络状态,在线用户等. 但是有2个问题:</p>

<ol>
  <li>它是php的…</li>
  <li>它获取信息都是通过shell下得系统命令</li>
</ol>

<p>我就用django写了一个python版的<a href="https://github.com/dongweiming/django-linux-dash">django-linux-dash</a>:本来想用flask,结果被人用了,但是问题也是通过subprocess调用命令获取数据,这个轮子有以下优点:</p>

<ol>
  <li>不仅支持linux,也支持OS X</li>
  <li>使用<a href="http://code.google.com/p/psutil/">psutil</a>, 项目完全不调用shell命令</li>
</ol>

<h4 id="section-1">安装和使用</h4>

<p>需要django&gt;=1.4以及psutils模块</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$pip install/easy_install django
</span><span class="line">$pip install/easy_install psutil</span></pre></figure></notextile></div>

<p>PS: OS X 还需要<a href="https://pypi.python.org/pypi/netifaces">netifaces</a>模块用于获取网卡ip</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$pip install/easy_install netifaces</span></pre></figure></notextile></div>

<p>启动:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cd /You/install/path
</span><span class="line">$git clone https://github.com/dongweiming/django-linux-dash &amp;&amp; cd django-linux-dash
</span><span class="line">$python manage.py runserver 0.0.0.0:8000</span></pre></figure></notextile></div>

<p>打开浏览器输入 http://localhost:8000 就可以看见了…</p>

<p>TODO:</p>

<ol>
  <li>目前还没有添加测速功能,因为我希望不要一直傻瓜式的下载某文件,根据用时计算平均值,因为第一它需要时间才会显示个速度,其次是不实时不能循环实时</li>
  <li>添加更多信息模块</li>
  <li>增加用户登陆和权限控制
…</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用python跑mapreduce]]></title>
    <link href="http://dongweiming.github.com/archives/yong-pythonpao-mapreduce/"/>
    <updated>2014-01-09T23:04:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/yong-pythonpao-mapreduce</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>mapreduce在我的理解里一直都是java等语言的专利,介于python乃至于pypy的性能局限，
一直没想过用python写分布式任务,最多就是多workers从消息队列取任务执行这样,但是最近一件事真的颠覆
了我对python的认识.</p>

<h4 id="section-1">先说说起因</h4>

<p>某天分享<a href="http://www.dongwm.com/archives/sed-and-awk/">sed和awk</a>,领导突发奇想让我用一些顾问的实际工作需要去我们的大量数据里面获取想要的数据的需求作为一些演示的例子.其中有这样一个需求(我去掉实际一些专业晦涩的用语,用实际的内容来表达):</p>

<h5 id="section-2">需求</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="mf">1.</span> <span class="err">有大量的</span><span class="n">gz</span><span class="err">压缩文件</span><span class="p">,</span> <span class="err">找到其中某</span><span class="mi">2</span><span class="err">天的数据</span><span class="p">,</span> <span class="err">每一行都是一条实际数据</span>
</span><span class="line"><span class="mf">2.</span> <span class="err">需要解压缩每个文件</span><span class="p">,</span><span class="err">遍历每行找到用逗号隔开的第</span><span class="mi">21</span><span class="err">列为</span><span class="mi">16233</span><span class="p">,</span><span class="err">第</span><span class="mi">23</span><span class="err">列为</span><span class="mi">27188</span><span class="err">的行</span><span class="o">.</span> <span class="err">以第</span><span class="mi">2</span><span class="err">列为键计算符合的数量</span>
</span><span class="line"><span class="mf">3.</span> <span class="err">在全部统计结果里面根据值计算符合的键的数量</span><span class="p">:</span> <span class="err">比如</span><span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span><span class="err">结果就是</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span><span class="err">也就是</span><span class="mi">2</span><span class="err">次的有</span><span class="mi">2</span><span class="err">个</span><span class="p">,</span><span class="mi">1</span><span class="err">次的只有一个</span>
</span></pre></figure></notextile></div>

<h6 id="section-3">分析</h6>

<p>一上来真的想用awk来搞.但是和其他同事一聊,有几个难点:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="mf">1.</span> <span class="mi">2</span><span class="err">天数据总量在</span><span class="mi">400</span><span class="n">G</span><span class="err">以上</span><span class="p">,</span><span class="err">用</span><span class="n">awk</span><span class="err">还要保留</span><span class="mi">2</span><span class="err">次哈希结果</span><span class="o">-</span><span class="err">不可能用</span><span class="n">awk</span>
</span><span class="line"><span class="mf">2.</span> <span class="err">用</span><span class="n">python</span><span class="p">,</span><span class="err">据同事经验说</span><span class="p">:</span><span class="err">只是解压缩这些小文件后读取什么都不做也大概</span><span class="mi">1</span><span class="err">天多的时间</span><span class="p">,</span><span class="err">完全不能忍</span>
</span><span class="line"><span class="mf">3.</span> <span class="err">数据还没有放到</span><span class="n">hadoop</span><span class="p">,</span> <span class="err">没有其他更好更快的方法</span>
</span></pre></figure></notextile></div>

<h5 id="section-4">解题思路:</h5>

<ol>
  <li>
    <p>最初我想做成这样:</p>

    <ol>
      <li>把需要处理的这些压缩文件放到队列里面</li>
      <li>启动多进程出队列里面获取要处理的文件,执行,把符合的结果放到共享变量叠加</li>
      <li>计算完成后从共享变量里面或者数据在生成上面第三条的结果</li>
    </ol>
  </li>
</ol>

<p>但是今天讲的是python得mapreduce,也就是我后续的版本,它源于伟大的Doug Hellmann的<a href="http://pymotw.com/2/multiprocessing/mapreduce.html">Implementing MapReduce with multiprocessing</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c">#coding=utf-8</span>
</span><span class="line"><span class="c"># python mapreduce 跑数实现</span>
</span><span class="line"><span class="c"># Author: Dongweiming</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">gzip</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">os</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">collections</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">operator</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">multiprocessing</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AdMapReduce</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">map_func</span><span class="p">,</span> <span class="n">reduce_func</span><span class="p">,</span> <span class="n">num_workers</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">        num_workers: 不指定就是默认可用cpu的核数</span>
</span><span class="line"><span class="sd">        map_func: map函数: 要求返回格式类似:[(a, 1), (b, 3)]</span>
</span><span class="line"><span class="sd">        reduce_func: reduce函数: 要求返回格式类似: (c, 10)</span>
</span><span class="line"><span class="sd">        &#39;&#39;&#39;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">map_func</span> <span class="o">=</span> <span class="n">map_func</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">reduce_func</span> <span class="o">=</span> <span class="n">reduce_func</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">pool</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="o">.</span><span class="n">Pool</span><span class="p">(</span><span class="n">num_workers</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mapped_values</span><span class="p">):</span>
</span><span class="line">        <span class="n">partitioned_data</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class="line">        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">mapped_values</span><span class="p">:</span>
</span><span class="line">            <span class="n">partitioned_data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">partitioned_data</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">        <span class="sd">&#39;&#39;&#39;调用类的时候被触发&#39;&#39;&#39;</span>
</span><span class="line">        <span class="c"># 其实都是借用multiprocessing.Pool.map这个函数, inputs是一个需要处理的列表,想想map函数</span>
</span><span class="line">        <span class="c"># chunksize表示每次给mapper的量, 这个根据需求调整效率</span>
</span><span class="line">        <span class="n">map_responses</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">map_func</span><span class="p">,</span> <span class="n">inputs</span><span class="p">,</span> <span class="n">chunksize</span><span class="o">=</span><span class="n">chunksize</span><span class="p">)</span>
</span><span class="line">        <span class="c"># itertools.chain是把mapper的结果链接起来为一个可迭代的对象</span>
</span><span class="line">        <span class="n">partitioned_data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">partition</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="n">map_responses</span><span class="p">))</span>
</span><span class="line">        <span class="c"># 大家想,上面的就是[(a, [1,2]), (b, [2,3]),列表中的数就是当时符合的次数,reduce就是吧列表符合项sum</span>
</span><span class="line">        <span class="n">reduced_values</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">pool</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">reduce_func</span><span class="p">,</span> <span class="n">partitioned_data</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">reduced_values</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mapper_match</span><span class="p">(</span><span class="n">one_file</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;第一次的map函数,从每个文件里面获取符合的条目&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">gzip</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">one_file</span><span class="p">)</span><span class="o">.</span><span class="n">readlines</span><span class="p">():</span>
</span><span class="line">        <span class="n">l</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="o">==</span> <span class="mi">16309</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">22</span><span class="p">])</span> <span class="o">==</span> <span class="mi">2656</span><span class="p">:</span>
</span><span class="line">            <span class="n">cookie</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line">            <span class="n">output</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">cookie</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">output</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">reduce_match</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;第一次的reduce函数,给相同的key做统计&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">cookie</span><span class="p">,</span> <span class="n">occurances</span> <span class="o">=</span> <span class="n">item</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">cookie</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">occurances</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mapper_count</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;第二次mapper函数,其实就是把某key的总数做键,但是值标1&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">_</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="n">item</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[(</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">reduce_count</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;第二次reduce函数&#39;&#39;&#39;</span>
</span><span class="line">    <span class="n">freq</span><span class="p">,</span> <span class="n">occurances</span> <span class="o">=</span> <span class="n">item</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">freq</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">occurances</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">    <span class="n">input_files</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&#39;/datacenter/input/2013-12-1[01]/*&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">mapper</span> <span class="o">=</span> <span class="n">AdMapReduce</span><span class="p">(</span><span class="n">mapper_match</span><span class="p">,</span> <span class="n">reduce_match</span><span class="p">)</span>
</span><span class="line">    <span class="n">cookie_feq</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">(</span><span class="n">input_files</span><span class="p">)</span>
</span><span class="line">    <span class="n">mapper</span> <span class="o">=</span> <span class="n">AdMapReduce</span><span class="p">(</span><span class="n">mapper_count</span><span class="p">,</span> <span class="n">reduce_count</span><span class="p">)</span>
</span><span class="line">    <span class="n">cookie_feq</span> <span class="o">=</span> <span class="n">mapper</span><span class="p">(</span><span class="n">cookie_feq</span><span class="p">)</span>
</span><span class="line">    <span class="n">cookie_feq</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">operator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class="line">    <span class="k">for</span> <span class="n">freq</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">cookie_feq</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;{0}</span><span class="se">\t</span><span class="s">{1}</span><span class="se">\t</span><span class="s">{2}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">freq</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">freq</span><span class="o">*</span><span class="n">count</span><span class="p">)</span>
</span><span class="line">    <span class="c">#cookie_feq.reverse()</span>
</span><span class="line">    <span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;cost:&#39;</span><span class="p">,</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span>
</span></pre></figure></notextile></div>

<h4 id="section-5">后话</h4>

<p>哇,看python做mapreduce也是可以这样优雅的, 我是用pypy跑下来,竟然只有了61分钟….</p>

<p>但是其实他只是借助mapreduce思想和多核的硬件基础,其实pool做的还是文件级别的处理.假如是少量的大文件,就未必有这样好的效果了.</p>

<p>我想很多时候这样的工作都可以交给这个Admapreduce类来做</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sed and awk]]></title>
    <link href="http://dongweiming.github.com/archives/sed-and-awk/"/>
    <updated>2013-12-24T08:16:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/sed-and-awk</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近做一个关于sed和awk的分享,这里把源码开源:<a href="https://github.com/dongweiming/sed_and_awk">sed_and_awk</a>,或者直接访问<a href="http://dongweiming.github.io/sed_and_awk">http://dongweiming.github.io/sed_and_awk</a>. 我这个ppt基本覆盖90%以上的知识点.</p>

<h4 id="section-1">一些说明</h4>

<p>我测试例子都是在osx下,freebsd的sed和awk和gnu的都略有不同.甚至osx下得版本都不能使用,我会在注释中说明.</p>

<ul>
  <li>
    <p>sed</p>

    <ol>
      <li>sed 通用</li>
      <li>/usr/local/bin/sed osx下编译的gnu sed</li>
    </ol>
  </li>
  <li>
    <p>awk</p>

    <ol>
      <li>awk 通用</li>
      <li>gawk  osx编译的gnu awk</li>
    </ol>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gentle - 帮助你快速部署代码到测试环境]]></title>
    <link href="http://dongweiming.github.com/archives/gentle-quickly-submit-code-to-the-test-environment-tools/"/>
    <updated>2013-12-02T21:58:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/gentle-quickly-submit-code-to-the-test-environment-tools</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>我想很多开发的同学都经历过这样的开发流程:</p>

<ul>
  <li>本地修改代码</li>
  <li>把代码推到测试环境</li>
  <li>重启测试环境需要的服务</li>
  <li>本地看效果,改bug重复1-3</li>
  <li>功能稳定后上线</li>
</ul>

<p>这个过程有什问题呢?</p>

<ul>
  <li>
    <p>假设你是一个做过运维或者能力很强的人,比如我这种,本地跑测试环境,但是假如一个新人,或者对测试环境中的某些
部分不是很了解的人, 甚至需要和生产环境完全一样的条件下, 本地可能就不好使了. 那么这需要一个测试服务器</p>
  </li>
  <li>首先你每次修改代码, push ,重启环境都需要你登陆测试环境,至少不够自动化.然后退回本地看效果,这个过程有点浪费时间和经理</li>
  <li>其次是你可能有好几个项目,他们之间可能都没什么共通点. 你需要多个测试环境</li>
  <li>当然你可以写几个脚本,为你每个测试环境写一个东西去自动化这些，未尝不可. 只是需要重复造很多轮子</li>
  <li>假如为了安全有跳板机,你需要登陆跳板机才能跳到你的测试服务器,你可能要写很复杂的expect脚本</li>
</ul>

<p>然后是我认为最重要的:</p>

<p><strong>凡是屁大点事就放个deamon的运维都是耍流氓, 就拿小屁几台服务器还搞神马salt, ansible之类的事情,真是太无聊了.</strong></p>

<p>这些东西帮助你做了很多事情,但是会让你变得更懒.而且重要的是-它们写的并不一定只符合你的需要或者就不符合你的需要. 我喜欢简单粗暴的实现,最近在看<a href="https://github.com/fabric/fabric">fabric</a>的代码, 作为做过op,也给<a href="https://github.com/saltstack/salt">salt</a>贡献过代码的我,写了这个东西: <a href="https://github.com/dongweiming/gentle">gentle</a>, 帮助我自动化提交代码到我的测试环境. 这个东西是我认为符合我需要，或者大部分开发同学需要的小东西,基于fabric, <a href="https://github.com/docopt/docopt">docopt</a> 和yaml.</p>

<h4 id="section-1">我的工作的一些特点</h4>

<p>我负责几个项目, 它们有以下特点</p>

<ul>
  <li>项目在不同的机房, 有完整的测试环境和相关数据</li>
  <li>项目依赖的服务基本不同,比如有的使用了supervisor, 有的是程序fork后退出了父进程;有的使用了nginx+uwsgi,有的就是nginx+服务等.</li>
  <li>项目之间需要的依赖应用不同,且启动顺序有区别. 这个很好理解, 启动需要先启动A,再启动B,才能启动C</li>
  <li>项目有的需要登陆跳板机</li>
</ul>

<h4 id="section-2">我以前的个人的开发习惯和流程</h4>

<ul>
  <li>我有一个专门的存放服务配置的目录, 后缀是ip或者项目的名字. git版本库, 每次更新后上传到测试环境</li>
  <li>我有专门的op PATH, 做了很多alias, 都是一些python或者shell的脚本,用来同步测试环境,登陆测试环境撑起服务的脚本</li>
</ul>

<p>看起来以前用的也不错. 但是gentle能怎么样提高呢?</p>

<h4 id="gentle">gentle的开发流程</h4>

<ul>
  <li>切换到你要开发的目录</li>
  <li>初始化这个目录,其实就是在当前目录增加一个.gentle.yaml</li>
  <li>根据你的需要配置测试环境账号ip密码, 想要同步的目录, 需要重启的服务和优先级已经命令</li>
  <li>以后每次只需在这个目录下,使用<code>gt publish</code> 或者更懒 <code>gt p</code>, 他就会帮你自动rsync然后重启相关服务.</li>
</ul>

<p>具体使用可以去我的github或者<a href="http://gentle.readthedocs.org/en/latest/">readthedocs.org</a></p>

<h4 id="section-3">安装和依赖</h4>

<p>我已经放到了pypi, 你可以使用pip或者easy_install</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">sudo</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">gentle</span>
</span></pre></figure></notextile></div>

<p>这样在系统环境下会有一个<code>gt</code>命令</p>

<p>fabric有2个对于项目更新的函数,一个是rsync_project,一个是upload_project, upload是把项目压缩在服务器上解压缩,实际上很浪费时间,但是rsync_project不能使用env.password,需要手动输入一次密码,都很不爽,我找到一个解决办法就是<code>sshpass</code>, 帮助自动输入rsync的密码, 我也给fabric提了PR. 我的项目使用了我个人的改进版的rsync_project</p>

<p>如果你是ubuntu 直接:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">sshpass</span>
</span></pre></figure></notextile></div>

<p>其他操作系统可以在这里下载 http://sourceforge.net/projects/sshpass/ 然后编译</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">tar</span> <span class="n">zxvf</span> <span class="n">sshpass</span><span class="o">-</span><span class="mf">1.05</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span> <span class="o">&amp;&amp;</span> <span class="n">cd</span> <span class="n">sshpass</span><span class="o">-</span><span class="mf">1.05</span> <span class="o">&amp;&amp;</span> <span class="o">./</span><span class="n">configure</span> <span class="o">&amp;&amp;</span>
</span><span class="line"><span class="n">make</span> <span class="o">&amp;&amp;</span> <span class="n">sudo</span> <span class="n">make</span> <span class="n">install</span>
</span></pre></figure></notextile></div>

<h4 id="section-4">一个我的测试环境的例子, 我加注释说明</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">host</span><span class="p">:</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">3.11</span> <span class="c">#测试服务器, 格式是user@host:port</span>
</span><span class="line"><span class="n">password</span><span class="p">:</span> <span class="n">dongwmspassword</span> <span class="c">#登录服务器需要的密码</span>
</span><span class="line"><span class="n">gateway</span><span class="p">:</span> <span class="c">#可以不存在,中间服务器,格式是user@host:port</span>
</span><span class="line"><span class="n">gatewaypassword</span><span class="p">:</span> <span class="c">#中间服务器(jump跳板机)的密码</span>
</span><span class="line"><span class="n">rsync</span><span class="p">:</span> <span class="c">#这个操作是rsync</span>
</span><span class="line">  <span class="n">lpath</span><span class="p">:</span> <span class="err">$</span><span class="n">ROOT</span> <span class="c">#你可以使用全路径, $ROOT表示当前路径,本地目录</span>
</span><span class="line">  <span class="n">rpath</span><span class="p">:</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">tornado</span> <span class="c"># 测试环境的目录</span>
</span><span class="line"><span class="n">services</span><span class="p">:</span> <span class="c"># 每个段落就是一个服务,这里有nginx和supervisor</span>
</span><span class="line">  <span class="n">nginx</span><span class="p">:</span>
</span><span class="line">    <span class="n">command</span><span class="p">:</span> <span class="n">kill</span> <span class="o">-</span><span class="mi">9</span> <span class="sb">`ps -ef |grep nginx|grep -v grep|awk &#39;{print $2}&#39;`</span> <span class="o">&amp;&amp;</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">nginx</span> <span class="c">#启动的命令</span>
</span><span class="line">    <span class="n">lpath</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">conf</span> <span class="c">#nginx.conf的本地地址</span>
</span><span class="line">    <span class="n">priority</span><span class="p">:</span> <span class="mi">1</span> <span class="c">#优先级越高越先执行</span>
</span><span class="line">    <span class="n">rpath</span><span class="p">:</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">conf</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">conf</span> <span class="c">#测试环境的nginx.conf路径</span>
</span><span class="line">    <span class="n">sudo</span><span class="p">:</span> <span class="n">false</span> <span class="c"># 因为这个环境很宽松 不需要sudo</span>
</span><span class="line">    <span class="n">user</span><span class="p">:</span> <span class="c">#sudo使用的用户,默认是登陆的用户</span>
</span><span class="line">  <span class="n">supervisor</span><span class="p">:</span>
</span><span class="line">    <span class="n">command</span><span class="p">:</span> <span class="n">supervisorctl</span> <span class="o">-</span><span class="n">c</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">supervisor</span><span class="o">/</span><span class="n">supervisord</span><span class="o">.</span><span class="n">conf</span> <span class="nb">reload</span>
</span><span class="line">    <span class="n">lpath</span><span class="p">:</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">dongwm</span><span class="o">/</span><span class="n">settings</span><span class="o">/</span><span class="n">supervisord</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="mi">31</span>
</span><span class="line">    <span class="n">priority</span><span class="p">:</span> <span class="mi">2</span>
</span><span class="line">    <span class="n">rpath</span><span class="p">:</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">supervisor</span><span class="o">/</span><span class="n">supervisord</span><span class="o">.</span><span class="n">conf</span>
</span><span class="line">    <span class="n">sudo</span><span class="p">:</span> <span class="n">false</span>
</span><span class="line">    <span class="n">user</span><span class="p">:</span>
</span><span class="line"><span class="n">username</span><span class="p">:</span> <span class="n">root</span> <span class="c">#登陆服务器的默认用户, 你可以在使用host的时候指定用户</span>
</span></pre></figure></notextile></div>

<h4 id="issuepr">欢迎给我issue和PR</h4>

<h4 id="todo">TODO</h4>

<ul>
  <li>因为很多人会用到跳板机,我想加入跳板机的用法, 看起来就像直接在本地操作远程一样 # 更新2013-12-03 完成</li>
  <li>设置输出是否隐藏,目前保留就是为了让我看到执行的过程</li>
  <li>设置支持多测试环境一起部署,或者说让生成环境的部署一样方便</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gentoo使用stumpwm做桌面管理器]]></title>
    <link href="http://dongweiming.github.com/archives/gentoo-use-stumpwm/"/>
    <updated>2013-11-25T23:52:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/gentoo-use-stumpwm</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>以前一直使用gentoo+gnome的方法使用,说实话,gentoo做个人桌面是在很一般, 尤其是跑起来
firefox, 虽然依然性能要比其他linux桌面发行版要好,可是我自己清楚.
尤其是gnome的很多功能对我个人完全没有用处,还浪费了内存. 最近神奇的同事@刘喆告诉我原来还有个神奇的
<a href="git://github.com/sabetts/stumpwm.git">stumpwm</a>, 基于common lisp的桌面管理.
我想很多人听过awesome,但是是lua的版本. 我当然希望用我熟悉的语言.这是一篇安装配置过程的博客</p>

<h4 id="section-1">安装遇到了一些问题</h4>

<p>本来一般的软件都是包管理emerge stumpwm 就好啦,但是我安装后依然找不到stumpwm,
在手动编译stumpwm的过程发现很多奇葩报错. 所以连sbcl也编译了一个</p>

<h4 id="section-2">安装过程</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c"># 安装sbcl到/usr/local</span>
</span><span class="line"><span class="n">wget</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">downloads</span><span class="o">.</span><span class="n">sourceforge</span><span class="o">.</span><span class="n">net</span><span class="o">/</span><span class="n">project</span><span class="o">/</span><span class="n">sbcl</span><span class="o">/</span><span class="n">sbcl</span><span class="o">/</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">13</span><span class="o">/</span><span class="n">sbcl</span><span class="o">-</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">13</span><span class="o">-</span><span class="n">source</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">bz2</span>
</span><span class="line"><span class="n">tar</span> <span class="n">jxvf</span> <span class="n">sbcl</span><span class="o">-</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">13</span><span class="o">-</span><span class="n">source</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">bz2</span>
</span><span class="line"><span class="n">cd</span> <span class="n">sbcl</span><span class="o">-</span><span class="mf">1.1</span><span class="o">.</span><span class="mi">13</span>
</span><span class="line"><span class="n">sh</span> <span class="n">make</span><span class="o">.</span><span class="n">sh</span>
</span><span class="line"><span class="n">unset</span> <span class="n">SBCL_HOME</span>
</span><span class="line"><span class="n">unset</span> <span class="n">INSTALL_ROOT</span>
</span><span class="line"><span class="n">sudo</span> <span class="n">sh</span> <span class="n">install</span><span class="o">.</span><span class="n">sh</span>
</span><span class="line">
</span><span class="line"><span class="c">#使用commonlisp的包管理工具quicklisp.lisp</span>
</span><span class="line">
</span><span class="line"><span class="n">curl</span> <span class="o">-</span><span class="n">O</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">beta</span><span class="o">.</span><span class="n">quicklisp</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">quicklisp</span><span class="o">.</span><span class="n">lisp</span>
</span><span class="line"><span class="n">sbcl</span> <span class="o">--</span><span class="n">load</span> <span class="n">quicklisp</span><span class="o">.</span><span class="n">lisp</span>
</span><span class="line"><span class="p">(</span><span class="n">quicklisp</span><span class="o">-</span><span class="n">quickstart</span><span class="p">:</span><span class="n">install</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="n">ql</span><span class="p">:</span><span class="n">add</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">init</span><span class="o">-</span><span class="nb">file</span><span class="p">)</span>
</span><span class="line"><span class="c"># 还需要以下2个依赖</span>
</span><span class="line"><span class="p">(</span><span class="n">ql</span><span class="p">:</span><span class="n">quickload</span> <span class="s">&quot;clx&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="n">ql</span><span class="p">:</span><span class="n">quickload</span> <span class="s">&quot;cl-ppcre&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 可选安装swank</span>
</span><span class="line"><span class="p">(</span><span class="n">ql</span><span class="p">:</span><span class="n">quickload</span> <span class="s">&quot;swank&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="n">ql</span><span class="p">:</span><span class="n">quickload</span> <span class="s">&quot;quicklisp-slime-helper&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 退出</span>
</span><span class="line"><span class="p">(</span><span class="n">quit</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># 下载stumpwm</span>
</span><span class="line">
</span><span class="line"><span class="n">git</span> <span class="n">clone</span> <span class="n">git</span><span class="p">:</span><span class="o">//</span><span class="n">git</span><span class="o">.</span><span class="n">savannah</span><span class="o">.</span><span class="n">nongnu</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">stumpwm</span><span class="o">.</span><span class="n">git</span>
</span><span class="line"><span class="n">cd</span> <span class="n">stumpwm</span> <span class="o">&amp;&amp;</span> <span class="o">./</span><span class="n">autogen</span><span class="o">.</span><span class="n">sh</span> <span class="o">&amp;&amp;</span> <span class="o">./</span><span class="n">configure</span> <span class="o">&amp;&amp;</span> <span class="n">make</span>
</span><span class="line"><span class="n">PS</span><span class="p">:</span> <span class="err">这个</span><span class="n">make</span><span class="err">时候就算报错</span><span class="p">,</span><span class="err">也没有太大关系</span>
</span><span class="line">
</span><span class="line"><span class="c">#生成2进制文件 再次进入sbcl交互模式</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="n">asdf</span><span class="p">:</span><span class="n">oos</span> <span class="s">&#39;asdf:load-op :stumpwm)</span>
</span><span class="line"><span class="p">(</span><span class="n">sb</span><span class="o">-</span><span class="n">ext</span><span class="p">:</span><span class="n">save</span><span class="o">-</span><span class="n">lisp</span><span class="o">-</span><span class="ow">and</span><span class="o">-</span><span class="n">die</span> <span class="s">&quot;stumpwm&quot;</span> <span class="p">:</span><span class="n">executable</span> <span class="n">t</span>
</span><span class="line">    <span class="p">:</span><span class="n">toplevel</span> <span class="c">#&#39;(lambda () (stumpwm:stumpwm &quot;:0&quot;)))</span>
</span><span class="line">
</span><span class="line"><span class="c"># 拷贝文件到PATH</span>
</span><span class="line">
</span><span class="line"><span class="n">sudo</span> <span class="n">cp</span> <span class="o">-</span><span class="n">rp</span> <span class="n">stumpwm</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置启动 注意是你的普通用户</span>
</span><span class="line">
</span><span class="line"><span class="err">$</span> <span class="n">echo</span> <span class="s">&quot;exec stumpwm&quot;</span> <span class="o">&gt;&gt;</span> <span class="o">~/.</span><span class="n">xinitrc</span>
</span><span class="line">
</span><span class="line"><span class="c"># 这样你就可以使用startx启动啦</span>
</span><span class="line">
</span><span class="line"><span class="n">stumpwm</span><span class="err">的命令都是</span><span class="n">ctrl</span><span class="o">+</span><span class="n">t</span> <span class="err">开头的</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用celery之怎么让celery跑起来]]></title>
    <link href="http://dongweiming.github.com/archives/how-to-use-celery/"/>
    <updated>2013-11-24T16:46:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/how-to-use-celery</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>自从发了上次的文章<a href="http://www.dongwm.com/archives/shi-yong-celeryzhi-shen-ru-celerypei-zhi/">使用celery之深入celery配置</a>,
有一些网友再问我怎么让celery跑起来. 其实说来也是,celery在新手眼里真的是比较重量级,不好懂,今天先让他跑起来吧
本文大部分代码和使用方法都可以在celery官网看到</p>

<h4 id="section-1">我想要的效果</h4>

<p>我想实现一个定时任务, 每3个小时的12分启动,假如是定时任务大概是这样的:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">12 */3 * * * python /where/is/the/path/that.py</span></pre></figure></notextile></div>

<h4 id="mq">选择MQ</h4>

<p>使用消息队列其实就是为了给任务一个时序,保证任务消息不丢失,想想你的一个任务是关乎公司核心业务,犹豫某种原因失败或者丢失怎么办?
celery就需要这个消息的存储,我这里还是选择rabbitmq  mongodb,redis都无所谓 只是存储的位置的问题.
选择其他的工具没有远程控制和监控</p>

<p>写法就是:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">BROKER_URL = 'amqp://myuser:mypassword@localhost:5672/vhost'</span></pre></figure></notextile></div>

<p>其中可以这样解析</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">amqp://user:password@hostname:port/vhost</span></pre></figure></notextile></div>

<p>vhost是命名空间,就像网站的子域名,在这里由于权限控制我们需要先创建账号和密码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$ rabbitmqctl add_user myuser mypassword
</span><span class="line">$ rabbitmqctl add_vhost myvhost
</span><span class="line">$ rabbitmqctl set_permissions -p myvhost myuser ".*" ".*" ".*"</span></pre></figure></notextile></div>

<h4 id="taskspy">编写tasks.py脚本</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">from celery import Celery
</span><span class="line">
</span><span class="line">app = Celery('tasks', broker='amqp://myuser:mypassword@localhost:5672/vhost')
</span><span class="line">
</span><span class="line">@app.task
</span><span class="line">def add(x, y):
</span><span class="line">    return x + y</span></pre></figure></notextile></div>
<p>#### 简单的使用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$celery -A tasks worker --loglevel=debug</span></pre></figure></notextile></div>

<p>-A指定的就是任务的程序 tasks.py  worker表示他是一个执行任务角色. 后面的记录日志类型,默认是info</p>

<p>这个时候,你可以在当前目录下使用python交互模式生成一个任务</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">&gt;&gt;&gt; from tasks import add
</span><span class="line">&gt;&gt;&gt; add.delay(4, 4)</span></pre></figure></notextile></div>

<p>这个时候可以看见上面的日志里面多了一些消息,然后里面多了这个任务的信息,比如下面这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">[2013-11-24 17:11:59,369: INFO/MainProcess] Received task: tasks.add[f27994b0-3628-43a1-b136-540a360e3d64]
</span><span class="line">[2013-11-24 17:11:59,371: INFO/MainProcess] Task tasks.add[f27994b0-3628-43a1-b136-540a360e3d64] succeeded in 0.00102571400021s: 8</span></pre></figure></notextile></div>

<p>可以看见你的任务被执行了</p>

<h4 id="python-">假如我使用python的包, 就像一个应用,让代码结构化一些</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$tree proj
</span><span class="line">proj
</span><span class="line">├── __init__.py
</span><span class="line">├── celery.py
</span><span class="line">└── tasks.py</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cat proj/celery.py
</span><span class="line">from __future__ import absolute_import
</span><span class="line">from celery import Celery
</span><span class="line">app = Celery('proj',
</span><span class="line">              broker='amqp://myuser:mypassword@localhost:5672/vhost',
</span><span class="line">              backend='amqp://',
</span><span class="line">              include=['proj.tasks'])
</span><span class="line">app.conf.update(CELERY_TASK_RESULT_EXPIRES=3600,)
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    app.start()</span></pre></figure></notextile></div>

<p>上面的broker就是消息存储的地址
backend是存储任务执行情况的,比如正在执行，执行失败, 已经执行结果.
include表示执行的任务的代码都放在哪个程序里面,比如这里的proj.tasks就是proj/tasks.py</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cat proj/tasks.py
</span><span class="line">from __future__ import absolute_import
</span><span class="line">
</span><span class="line">from proj.celery import app
</span><span class="line">
</span><span class="line">
</span><span class="line">@app.task
</span><span class="line">def add(x, y):
</span><span class="line">    return x + y</span></pre></figure></notextile></div>

<p>其中的app.task是一个装饰器, 你可以在tasks.py里面加很多函数,但是celery只会找带这个装饰器的函数当成一种任务去执行
你可以有多个这样的脚本,只要在上面的celery.py的include的列表中指定</p>

<p>好吧 我们可以这样启动</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$celery worker --app=proj -l info</span></pre></figure></notextile></div>

<p>proj 就是我们刚才应用的项目目录</p>

<h4 id="section-2">给我们的项目任务放到特定的队列</h4>

<p>可能你有很多的任务,但是你希望某些机器跑某些任务, 你可以希望有些任务优先级比较高,而不希望
先进先出的等待. 那么需要引入一个队列的问题. 也就是说在你的broker的消息存储里面有一些队列，他们并行运行，但是worker只从对应
的队列里面取任务.</p>

<p>我们要修改配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">$cat proj/celery.py
</span><span class="line">from __future__ import absolute_import
</span><span class="line">from celery import Celery
</span><span class="line">app = Celery('proj',
</span><span class="line">              broker='amqp://myuser:mypassword@localhost:5672/vhost',
</span><span class="line">              backend='amqp://',
</span><span class="line">              include=['proj.tasks'])
</span><span class="line">app.conf.update(
</span><span class="line">    CELERY_ROUTES = {
</span><span class="line">            'proj.tasks.add': {'queue': 'hipri'},
</span><span class="line">                },
</span><span class="line">                )
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    app.start()</span></pre></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">celery -A proj worker -Q hipri #这个worker只处理hipri这个队列的任务</span></pre></figure></notextile></div>

<p>你会发现add这个函数任务被放在一个叫做’hipri’的队列里面，想要执行那么也需要改:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">from proj.tasks import add
</span><span class="line">add.apply_async((2, 2), queue='hipri')</span></pre></figure></notextile></div>

<h4 id="beat">使用beat自动调度</h4>

<p>想想吧. 目前还是交互模式去手动执行, 我们要是想crontab的定时生成和执行,那么就是celery beat干的事情</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">from __future__ import absolute_import
</span><span class="line">
</span><span class="line">from datetime import timedelta
</span><span class="line">from celery import Celery
</span><span class="line">
</span><span class="line">app = Celery('proj',
</span><span class="line">             broker='amqp://myuser:mypassword@localhost:5672/vhost',
</span><span class="line">             backend='amqp://',
</span><span class="line">              include=['proj.tasks'])
</span><span class="line">
</span><span class="line">app.conf.update(
</span><span class="line">    CELERY_ROUTES = {
</span><span class="line">        'proj.tasks.add': {'queue': 'hipri'},
</span><span class="line">    },
</span><span class="line">
</span><span class="line">    CELERYBEAT_SCHEDULE = {
</span><span class="line">        "add": {
</span><span class="line">                "task": "proj.tasks.add",
</span><span class="line">                "schedule": timedelta(seconds=10),
</span><span class="line">                "args": (16, 16)
</span><span class="line">                }, },
</span><span class="line">                )
</span><span class="line">
</span><span class="line">if __name__ == '__main__':
</span><span class="line">    app.start()
</span></pre></figure></notextile></div>

<p>注意发现了一个CELERYBEAT_SCHEDULE,里面的调度其实就是表示10秒生成一次,worker启动方法一样,
这里启动beat,他就是按时生成任务发到MQ里面,让worker取走去执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">celery -A proj beat</span></pre></figure></notextile></div>

<p>其实也可以在worker命令中加-B</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">celery -A proj worker -B -Q hipri -l debug</span></pre></figure></notextile></div>

<p>刚才的CELERYBEAT_SCHEDULE也可以使用crontab的风格，比如我说的没3小时的12分就可以这样:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><pre class="sh_"><span class="line">from celery.schedules import crontab
</span><span class="line">
</span><span class="line">CELERYBEAT_SCHEDULE = {
</span><span class="line">        "add": {
</span><span class="line">                "task": "tasks.add",
</span><span class="line">                "schedule": crontab(hour="*/3", minute=12),
</span><span class="line">                "args": (16, 16),
</span><span class="line">                },
</span><span class="line">            }</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个flask+mongoengine的site]]></title>
    <link href="http://dongweiming.github.com/archives/a-data-analysis-site-by-flask-and-mongoengine/"/>
    <updated>2013-11-20T17:39:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/a-data-analysis-site-by-flask-and-mongoengine</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>最近一直学习emacs和elisp, 也在做关于mongodb相关的研究,闲来无事就做了个网站,后端使用了flask, mongoengine, 前端css框架用的是
雅虎的<a href="https://github.com/yui/pure">pure</a>, 还是用了神奇的<a href="https://github.com/gruntjs/grunt">grunt</a>做页面修改的livereload, 然后有d3,
jquery, amchart和一个最近发现的页面消息弹出<a href="https://github.com/CodeSeven/toastr">toastr</a>.想学习flask和mongoengine的童鞋可直接拿去,开源地址是
<a href="https://github.com/dongweiming/data-analysis">data-analysis</a></p>

<h4 id="section-1">下载依赖和启动</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">cd</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">data</span><span class="o">-</span><span class="n">analysis</span>
</span><span class="line"><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="o">.</span><span class="n">txt</span>
</span><span class="line"><span class="c"># 安装grunt</span>
</span><span class="line"><span class="n">npm</span> <span class="n">install</span>
</span><span class="line"><span class="c"># 我的后端样例数据</span>
</span><span class="line"><span class="n">mongorestore</span> <span class="o">-</span><span class="n">d</span> <span class="n">fetch_data</span> <span class="o">--</span><span class="n">directoryperdb</span> <span class="n">dump</span><span class="o">/</span><span class="n">fetch_data</span>
</span><span class="line"><span class="n">cd</span> <span class="n">data_analysis</span>
</span><span class="line"><span class="c"># 启动Grunt</span>
</span><span class="line"><span class="n">grunt</span>
</span><span class="line"><span class="c"># 启动</span>
</span><span class="line"><span class="n">python</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span>
</span><span class="line"><span class="c"># 然后打开 http://Youip:5000</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vary.vim-自动去掉行尾空格]]></title>
    <link href="http://dongweiming.github.com/archives/vary-dot-vim-zi-dong-qu-diao-xing-wei-kong-ge/"/>
    <updated>2013-09-08T21:03:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/vary-dot-vim-zi-dong-qu-diao-xing-wei-kong-ge</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>一直想改成emacs无奈工作需要效率，所以vim还没有完全放弃. 我想做python的同学很可能有我一样的困扰:</p>

<ol>
  <li>在维护别人的代码的时候发现有很多tab和空格混用或者行尾空格没有删除</li>
</ol>

<p>我以前可能没有注意这个问题，就是自觉的使用ed模式: :%s/\s+$//g和:retab，最近老大的一句话提醒
了我:他问我是否vim可以配置成自动模式? 以我对vim的了解它肯定不会介入个人的编辑,那么可能就要使用hook的方法.</p>

<p>这也就是我的<a href="https://github.com/dongweiming/vary.vim">vary.vim</a>的原理:当保存文件的时候(:w)自动执行命令.
其实我想你可能会问，为啥是我保存的时候而不是打开的时候呢?额 下面会讲到</p>

<h4 id="readme">安装配置请看项目的README</h4>

<p>安装后就算不配置默认只对python语言生效-团队和语言风格不同</p>

<h4 id="vim">修改我的vim插件</h4>

<p>我一直在想究竟哪种方式更合理(打开文件就修改还是保存的时候再修改),我默认是保存，但是其实你可以修改我的autocmd命令为:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line">autocmd BufReadPost * :call StripTrailingWhite<span class="o">()</span>
</span><span class="line">autocmd BufReadPost * :call RetabIndents<span class="o">()</span>
</span></pre></figure></notextile></div>

<p>表示打开文件之前就修改，把修改后的结果呈现给你</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用celery之深入celery配置]]></title>
    <link href="http://dongweiming.github.com/archives/shi-yong-celeryzhi-shen-ru-celerypei-zhi/"/>
    <updated>2013-08-24T14:08:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/shi-yong-celeryzhi-shen-ru-celerypei-zhi</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>celery的官方文档其实相对还是写的很不错的.但是在一些深层次的使用上面却显得杂乱甚至就没有某些方面的介绍, 通过我的一个测试环境的settings.py来说明一些使用celery的技巧和解决办法</p>

<h4 id="amqp">amqp交换类型</h4>

<p>其实一共有4种交换类型，还有默认类型和自定义类型. 但是对我们配置队列只会用到其中之三，我来一个个说明，英语好的话可以直接去看英文文档</p>

<p>首先思考一下流程:</p>

<ol>
  <li>
    <p>celerybeat生成任务消息，然后发送消息到一个exchange(交换机)</p>
  </li>
  <li>
    <p>交换机决定那个(些)队列会接收这个消息，这个其实就是根据下面的exchange的类型和绑定到这个交换机所用的bindingkey</p>
  </li>
</ol>

<p>我们这里要说的其实就是怎么样决定第二步谁接收的问题</p>

<ol>
  <li>Direct Exchange</li>
</ol>

<p>如其名，直接交换，也就是指定一个消息被那个队列接收， 这个消息被celerybeat定义个一个routing key，如果你发送给交换机并且那个队列绑定的bindingkey 那么就会直接转给这个队列</p>

<ol>
  <li>Topic Exchange</li>
</ol>

<p>你设想一下这样的环境(我举例个小型的应该用场景): 你有三个队列和三个消息, A消息可能希望被X,Y处理,B消息你希望被,X,Z处理,C消息你希望被Y,Z处理.并且这个不是队列的不同而是消息希望被相关的队列都去执行,看一张图可能更好理解:</p>

<p><img src="https://access.redhat.com/site/documentation/resources/docs/en-US/Red_Hat_Enterprise_MRG/1.1/html/Messaging_User_Guide/images/topic-exchange.png" alt="" /></p>

<p>对，Topic可以根据同类的属性进程通配, 你只需要routing key有’.’分割:比如上图中的usa.news, usa.weather, europe.news, europe.weather</p>

<ol>
  <li>Fanout Exchange</li>
</ol>

<p>先想一下广播的概念, 在设想你有某个任务，相当耗费时间，但是却要求很高的实时性,那么你可以需要多台服务器的多个workers一起工作，每个服务器负担其中的一部分,但是celerybeat只会生成一个任务,被某个worker取走就没了,
所以你需要让每个服务器的队列都要收到这个消息.这里很需要注意的是:你的fanout类型的消息在生成的时候为多份,每个队列一份，而不是一个消息发送给单一队列的次数</p>

<h4 id="settingspy">我的settings.py</h4>

<p>这里只是相关于celery的部分:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">djcelery</span>
</span><span class="line"><span class="n">djcelery</span><span class="o">.</span><span class="n">setup_loader</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&#39;django.contrib.auth&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.contenttypes&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.sessions&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.sites&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="c">#&#39;django.contrib.staticfiles&#39;,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.messages&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="c"># Uncomment the next line to enable the admin:</span>
</span><span class="line">    <span class="s">&#39;django.contrib.admin&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.staticfiles&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="c"># Uncomment the next line to enable admin documentation:</span>
</span><span class="line">    <span class="c"># &#39;django.contrib.admindocs&#39;,</span>
</span><span class="line">    <span class="s">&#39;dongwm.smhome&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;dongwm.apply&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;djcelery&#39;</span><span class="p">,</span> <span class="c"># 这里增加了djcelery 也就是为了在django admin里面可一直接配置和查看celery</span>
</span><span class="line">    <span class="s">&#39;django_extensions&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;djsupervisor&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django.contrib.humanize&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;django_jenkins&#39;</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">BROKER_URL</span> <span class="o">=</span> <span class="s">&#39;amqp://username:password@localhost:5672/yourvhost&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">CELERY_IMPORTS</span> <span class="o">=</span> <span class="p">(</span>
</span><span class="line">    <span class="s">&#39;dongwm.smhome.tasks&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;dongwm.smdata.tasks&#39;</span><span class="p">,</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">CELERY_RESULT_BACKEND</span> <span class="o">=</span> <span class="s">&quot;amqp&quot;</span> <span class="c"># 官网优化的地方也推荐使用c的librabbitmq</span>
</span><span class="line"><span class="n">CELERY_TASK_RESULT_EXPIRES</span> <span class="o">=</span> <span class="mi">1200</span> <span class="c"># celery任务执行结果的超时时间，我的任务都不需要返回结果,只需要正确执行就行</span>
</span><span class="line"><span class="n">CELERYD_CONCURRENCY</span> <span class="o">=</span> <span class="mi">50</span> <span class="c"># celery worker的并发数 也是命令行-c指定的数目,事实上实践发现并不是worker也多越好,保证任务不堆积,加上一定新增任务的预留就可以</span>
</span><span class="line"><span class="n">CELERYD_PREFETCH_MULTIPLIER</span> <span class="o">=</span> <span class="mi">4</span> <span class="c"># celery worker 每次去rabbitmq取任务的数量，我这里预取了4个慢慢执行,因为任务有长有短没有预取太多</span>
</span><span class="line"><span class="n">CELERYD_MAX_TASKS_PER_CHILD</span> <span class="o">=</span> <span class="mi">40</span> <span class="c"># 每个worker执行了多少任务就会死掉，我建议数量可以大一些，比如200</span>
</span><span class="line"><span class="n">CELERYBEAT_SCHEDULER</span> <span class="o">=</span> <span class="s">&#39;djcelery.schedulers.DatabaseScheduler&#39;</span> <span class="c"># 这是使用了django-celery默认的数据库调度模型,任务执行周期都被存在你指定的orm数据库中</span>
</span><span class="line"><span class="n">CELERY_DEFAULT_QUEUE</span> <span class="o">=</span> <span class="s">&quot;default_dongwm&quot;</span> <span class="c"># 默认的队列，如果一个消息不符合其他的队列就会放在默认队列里面</span>
</span><span class="line">
</span><span class="line"><span class="n">CELERY_QUEUES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s">&quot;default_dongwm&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="c"># 这是上面指定的默认队列</span>
</span><span class="line">        <span class="s">&quot;exchange&quot;</span><span class="p">:</span> <span class="s">&quot;default_dongwm&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;exchange_type&quot;</span><span class="p">:</span> <span class="s">&quot;direct&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;routing_key&quot;</span><span class="p">:</span> <span class="s">&quot;default_dongwm&quot;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="s">&quot;topicqueue&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="c"># 这是一个topic队列 凡是topictest开头的routing key都会被放到这个队列</span>
</span><span class="line">        <span class="s">&quot;routing_key&quot;</span><span class="p">:</span> <span class="s">&quot;topictest.#&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;exchange&quot;</span><span class="p">:</span> <span class="s">&quot;topic_exchange&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;exchange_type&quot;</span><span class="p">:</span> <span class="s">&quot;topic&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="s">&quot;test2&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="c"># test和test2是2个fanout队列,注意他们的exchange相同</span>
</span><span class="line">        <span class="s">&quot;exchange&quot;</span><span class="p">:</span> <span class="s">&quot;broadcast_tasks&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;exchange_type&quot;</span><span class="p">:</span> <span class="s">&quot;fanout&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;binding_key&quot;</span><span class="p">:</span> <span class="s">&quot;broadcast_tasks&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="s">&quot;test&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class="line">        <span class="s">&quot;exchange&quot;</span><span class="p">:</span> <span class="s">&quot;broadcast_tasks&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;exchange_type&quot;</span><span class="p">:</span> <span class="s">&quot;fanout&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="s">&quot;binding_key&quot;</span><span class="p">:</span> <span class="s">&quot;broadcast_tasks2&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">MyRouter</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">route_for_task</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">kwargs</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">task</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;topictest&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&#39;queue&#39;</span><span class="p">:</span> <span class="s">&#39;topicqueue&#39;</span><span class="p">,</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="c"># 我的dongwm.tasks文件里面有2个任务都是test开头</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">task</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;dongwm.tasks.test&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="p">{</span>
</span><span class="line">                <span class="s">&quot;exchange&quot;</span><span class="p">:</span> <span class="s">&quot;broadcast_tasks&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="c"># 剩下的其实就会被放到默认队列</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">None</span>
</span><span class="line">
</span><span class="line"><span class="c"># CELERY_ROUTES本来也可以用一个大的含有多个字典的字典,但是不如直接对它做一个名称统配</span>
</span><span class="line"><span class="n">CELERY_ROUTES</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyRouter</span><span class="p">(),</span> <span class="p">)</span>
</span></pre></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[封装pymongo自动关闭连接]]></title>
    <link href="http://dongweiming.github.com/archives/feng-zhuang-pymongozi-dong-guan-bi-lian-jie/"/>
    <updated>2013-08-16T21:42:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/feng-zhuang-pymongozi-dong-guan-bi-lian-jie</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>在我工作的项目里面使用了mongodb.自然也用到了pymongo.但是它都是在大片的函数里面使用类似于这样的方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">db</span>
</span><span class="line"><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">    <span class="n">db</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">find_one</span><span class="p">()</span>
</span><span class="line">    <span class="o">...</span>
</span></pre></figure></notextile></div>

<p>但是问题是在使用完都没有关闭连接,这样多台服务器连接我这台mongodb服务器，在业务高峰期就会占满我的连接, 我当时总结造成这个原因的问题有以下三种:</p>

<ol>
  <li>
    <p>上面说的用完db不关闭连接而是等着db超时</p>
  </li>
  <li>
    <p>注意上面的import，其实在import文件的时候数据库连接就已经生成了，没有在需要的时候才创建, 占满我连接的应用其实有很多没有用，浪费了</p>
  </li>
  <li>
    <p>nginx、uwsgi，celery等应用配置的问题，造成过多的实例，其实根本无益</p>
  </li>
</ol>

<h4 id="pymongo">我今天写的一个封装pymongo和关闭数据库连接的装饰器</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#/usr/bin/env python</span>
</span><span class="line"><span class="c"># coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">1. 封装数据库操作(INSERT,FIND,UPDATE)</span>
</span><span class="line"><span class="sd">2. 函数执行完MONGODB操作后关闭数据库连接</span>
</span><span class="line"><span class="sd">&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">pymongo.database</span> <span class="kn">import</span> <span class="n">Database</span>
</span><span class="line">
</span><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span>
</span><span class="line"><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class="line">    <span class="c"># 好像2.4之前的pymongo都没有MongoClient,现在官网已经把Connection抛弃了</span>
</span><span class="line">    <span class="kn">import</span> <span class="nn">warnings</span>
</span><span class="line">    <span class="n">warnings</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s">&quot;Strongly recommend upgrading to the latest version pymongo version,&quot;</span>
</span><span class="line">                  <span class="s">&quot;Connection is DEPRECATED: Please use mongo_client instead.&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">Connection</span> <span class="k">as</span> <span class="n">MongoClient</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Mongo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="sd">&#39;&#39;&#39;封装数据库操作&#39;&#39;&#39;</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="s">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">27017</span><span class="p">,</span> <span class="n">database</span><span class="o">=</span><span class="s">&#39;test&#39;</span><span class="p">,</span>
</span><span class="line">                 <span class="n">max_pool_size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">host</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="n">port</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">max_pool_size</span> <span class="o">=</span> <span class="n">max_pool_size</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="n">timeout</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">database</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@property</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="c"># 我这里是为了使用类似&quot;db.集合.操作&quot;的操作的时候才会生成数据库连接,其实pymongo已经实现了进程池,也可以把这个db放在__init__里面,</span>
</span><span class="line">        <span class="c"># 比如我把db关掉有其他的数据库调用连接又会生成,并且不影响使用.我这里只是想每次执行数据库生成一个连接用完关掉-自己控制自己的</span>
</span><span class="line">        <span class="k">return</span> <span class="n">MongoClientself</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">port</span><span class="p">,</span> <span class="n">max_pool_size</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">max_pool_size</span><span class="p">,</span>
</span><span class="line">                  <span class="n">connectTimeoutMS</span><span class="o">=</span><span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">collection</span><span class="p">):</span>
</span><span class="line">        <span class="c"># 为了兼容db[集合].操作的用法</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__getattr__</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">collection_or_func</span><span class="p">):</span>
</span><span class="line">        <span class="n">db</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">connect</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">database</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">collection_or_func</span> <span class="ow">in</span> <span class="n">Database</span><span class="o">.</span><span class="n">__dict__</span><span class="p">:</span>
</span><span class="line">            <span class="c"># 当调用的是db的方法就直接返回</span>
</span><span class="line">            <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">collection_or_func</span><span class="p">)</span>
</span><span class="line">        <span class="c"># 否则委派给Collection</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Collection</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">collection_or_func</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Collection</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">collection</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">db</span><span class="p">,</span> <span class="n">collection</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">operation</span><span class="p">):</span>
</span><span class="line">        <span class="c"># 我这个封装只是为了拦截一部分操作,不符合的就直接raise属性错误</span>
</span><span class="line">        <span class="n">control_type</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;disconnect&#39;</span><span class="p">,</span> <span class="s">&#39;insert&#39;</span><span class="p">,</span> <span class="s">&#39;update&#39;</span><span class="p">,</span> <span class="s">&#39;find&#39;</span><span class="p">,</span> <span class="s">&#39;find_one&#39;</span><span class="p">]</span>
</span><span class="line">        <span class="k">if</span> <span class="n">operation</span> <span class="ow">in</span> <span class="n">control_type</span><span class="p">:</span>
</span><span class="line">            <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="p">,</span> <span class="n">operation</span><span class="p">)</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">close_db</span><span class="p">(</span><span class="n">dbs</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;db&#39;</span><span class="p">]):</span>
</span><span class="line">    <span class="sd">&#39;&#39;&#39;</span>
</span><span class="line"><span class="sd">    关闭mongodb数据库连接</span>
</span><span class="line"><span class="sd">    db : 在执行函数里面使用的db的名字(大部分是db，也会有s_db)</span>
</span><span class="line"><span class="sd">        Usage::</span>
</span><span class="line"><span class="sd">            &gt;&gt;&gt;s_db = Mongo()</span>
</span><span class="line"><span class="sd">            &gt;&gt;&gt;@close_db([&#39;s_db&#39;])</span>
</span><span class="line"><span class="sd">            ...: def test():</span>
</span><span class="line"><span class="sd">            ...:     print s_db.test.insert({&#39;a&#39;: 1, &#39;b&#39;: 2})</span>
</span><span class="line"><span class="sd">            ...:</span>
</span><span class="line"><span class="sd">    &#39;&#39;&#39;</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">_deco</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">_call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">            <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">            <span class="k">for</span> <span class="n">db</span> <span class="ow">in</span> <span class="n">dbs</span><span class="p">:</span>
</span><span class="line">                <span class="k">try</span><span class="p">:</span>
</span><span class="line">                    <span class="n">func</span><span class="o">.</span><span class="n">func_globals</span><span class="p">[</span><span class="n">db</span><span class="p">]</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
</span><span class="line">                <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
</span><span class="line">                    <span class="k">pass</span>
</span><span class="line">            <span class="k">return</span> <span class="n">result</span>
</span><span class="line">        <span class="k">return</span> <span class="n">_call</span>
</span><span class="line">    <span class="k">return</span> <span class="n">_deco</span>
</span></pre></figure></notextile></div>

<p>PS: 在我测试的时候发现,使用Mongo()类生成的db，操作完会自动关闭连接了…</p>

<h4 id="section-1">怎么样给一个很大的文件每个函数都加上面的这个装饰器？</h4>

<p>项目每个脚本的代码都很长，函数也很多，并且每个函数里面使用的db的名字都不同,比如有一些一些风格:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">db</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">find_one</span><span class="p">()</span>
</span><span class="line"><span class="n">s_db</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">test</span><span class="o">=</span><span class="s">&#39;test&#39;</span><span class="p">))</span>
</span><span class="line"><span class="o">...</span>
</span></pre></figure></notextile></div>

<p>每个函数加一个装饰器,好费劲，就想能不能自动分辨文件中的函数然后给他们自动加装饰器，然后就有以下的一个做好的脚本:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#coding=utf-8</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">copy</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">types</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">_call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">        <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">        <span class="k">print</span> <span class="s">&#39;wrap you&#39;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">result</span>
</span><span class="line">    <span class="k">return</span> <span class="n">_call</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;test&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">test2</span><span class="p">():</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;test3&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">glocal_dict</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="nb">globals</span><span class="p">())</span>
</span><span class="line">
</span><span class="line"><span class="n">func_list</span> <span class="o">=</span> <span class="p">[[</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">glocal_dict</span><span class="o">.</span><span class="n">iteritems</span><span class="p">()</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">k</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;__&#39;</span><span class="p">)]</span>
</span><span class="line">
</span><span class="line"><span class="k">for</span> <span class="n">func_name</span><span class="p">,</span> <span class="n">func</span> <span class="ow">in</span> <span class="n">func_list</span><span class="p">:</span>
</span><span class="line">    <span class="k">if</span>  <span class="n">func_name</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;wraps&#39;</span><span class="p">,</span> <span class="s">&#39;copy&#39;</span><span class="p">,</span> <span class="s">&#39;wrap&#39;</span><span class="p">,</span> <span class="s">&#39;types&#39;</span><span class="p">]:</span>
</span><span class="line">        <span class="k">continue</span>
</span><span class="line">    <span class="k">if</span> <span class="n">types</span><span class="o">.</span><span class="n">FunctionType</span>  <span class="o">==</span> <span class="nb">type</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="nb">globals</span><span class="p">()[</span><span class="n">func_name</span><span class="p">]</span><span class="o">=</span> <span class="n">wrap</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span></pre></figure></notextile></div>

<p>这样当你调用的时候自动就有了装饰器:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_bash"><span class="line">&gt;&gt;&gt; from <span class="nb">test </span>import <span class="nb">test</span>
</span><span class="line">&gt;&gt;&gt; <span class="nb">test</span><span class="o">()</span>
</span><span class="line"><span class="nb">test</span>
</span><span class="line">wrap you
</span><span class="line">&gt;&gt;&gt;
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用tornado让你的请求异步非阻塞]]></title>
    <link href="http://dongweiming.github.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/"/>
    <updated>2013-08-14T12:08:00+08:00</updated>
    <id>http://dongweiming.github.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai</id>
    <content type="html"><![CDATA[<h4 id="section">前言</h4>

<p>也许有同学很迷惑:tornado不是标榜异步非阻塞解决10K问题的嘛?但是我却发现不是torando不好，而是你用错了.比如最近发现一个事情:某网站打开页面很慢,服务器cpu/内存都正常.网络状态也良好.
后来发现，打开页面会有很多请求后端数据库的访问，有一个mongodb的数据库业务api的rest服务.但是它的tornado却用错了,一步步的来研究问题:</p>

<h4 id="section-1">说明</h4>

<p>以下的例子都有2个url,一个是耗时的请求，一个是可以或者说需要立刻返回的请求,我想就算一个对技术不熟，从道理上来说的用户，
他希望的是他访问的请求不会影响也不会被其他人的请求影响</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#!/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpserver</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.options</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpclient</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>
</span><span class="line"><span class="n">define</span><span class="p">(</span><span class="s">&quot;port&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;run on the given port&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;when i sleep 5s&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JustNowHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;i hope just now see you&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">parse_command_line</span><span class="p">()</span>
</span><span class="line">    <span class="n">app</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">(</span><span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
</span><span class="line">            <span class="p">(</span><span class="s">r&quot;/sleep&quot;</span><span class="p">,</span> <span class="n">SleepHandler</span><span class="p">),</span> <span class="p">(</span><span class="s">r&quot;/justnow&quot;</span><span class="p">,</span> <span class="n">JustNowHandler</span><span class="p">)])</span>
</span><span class="line">    <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class="line">    <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>假如你使用页面请求或者使用哪个httpie,curl等工具先访问http://localhost:8000/sleep,再访问http://localhost:8000/justnow.你会发现本来可以立刻返回的/jsutnow的请求会一直阻塞到/sleep请求完才返回.</p>

<p>这是为啥?为啥我的请求被/sleep请求阻塞了？如果平时我们的web请求足够快我们可能不会意识到这个问题，但是事实上经常会有一些耗时的进程，意味着应用程序被有效的锁定直至处理结束.</p>

<p>这是时候你有没有想起@tornado.web.asynchronous这个装饰器？但是使用这个装饰器有个前提就是你要耗时的执行需要执行异步,比如上面的time.sleep,你只是加装饰器是没有作用的，而且需要注意的是
Tornado默认在函数处理返回时关闭客户端的连接,但是当你使用@tornado.web.asynchonous装饰器时，Tornado永远不会自己关闭连接，需要显式的self.finish()关闭</p>

<p>我们大部分的函数都是阻塞的, 比如上面的time.sleep其实tornado有个异步的实现:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#!/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpserver</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.options</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.gen</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpclient</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.concurrent</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>
</span><span class="line"><span class="n">define</span><span class="p">(</span><span class="s">&quot;port&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;run on the given port&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="nd">@tornado.gen.coroutine</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">tornado</span><span class="o">.</span><span class="n">gen</span><span class="o">.</span><span class="n">Task</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_timeout</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;when i sleep 5s&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JustNowHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;i hope just now see you&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">parse_command_line</span><span class="p">()</span>
</span><span class="line">    <span class="n">app</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">(</span><span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
</span><span class="line">            <span class="p">(</span><span class="s">r&quot;/sleep&quot;</span><span class="p">,</span> <span class="n">SleepHandler</span><span class="p">),</span> <span class="p">(</span><span class="s">r&quot;/justnow&quot;</span><span class="p">,</span> <span class="n">JustNowHandler</span><span class="p">)])</span>
</span><span class="line">    <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class="line">    <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>这里有个新的tornado.gen.coroutine装饰器, coroutine是3.0之后新增的装饰器.以前的办法是用回调，还是看我这个例子:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_timeout</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">on_response</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">on_response</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;when i sleep 5s&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>使用了callback, 但是新的装饰器让我们通过yield实现同样的效果:你在打开/sleep之后再点击/justnow，
justnow的请求都是立刻返回不受影响.但是用了asynchronous的装饰器你的耗时的函数也需要执行异步</p>

<p>刚才说的都是没有意义的例子，下面写个有点用的:读取mongodb数据库数据，然后再前端按行write出来</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#!/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpserver</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.options</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.gen</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpclient</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.concurrent</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="c"># 一个mongodb出品的支持异步的数据库的python驱动</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">motor</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>
</span><span class="line"><span class="n">define</span><span class="p">(</span><span class="s">&quot;port&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;run on the given port&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line"><span class="c"># db其实就是test数据库的游标</span>
</span><span class="line"><span class="n">db</span> <span class="o">=</span> <span class="n">motor</span><span class="o">.</span><span class="n">MotorClient</span><span class="p">()</span><span class="o">.</span><span class="n">open_sync</span><span class="p">()</span><span class="o">.</span><span class="n">test</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">BaseHandler</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="nd">@tornado.gen.coroutine</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="c"># 这一行执行还是阻塞需要时间的，我的tt集合有一些数据并且没有索引</span>
</span><span class="line">        <span class="n">cursor</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">tt</span><span class="o">.</span><span class="n">find</span><span class="p">()</span><span class="o">.</span><span class="n">sort</span><span class="p">([(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)])</span>
</span><span class="line">        <span class="c"># 这部分会异步非阻塞的执行二不影响其他页面请求</span>
</span><span class="line">        <span class="k">while</span> <span class="p">(</span><span class="k">yield</span> <span class="n">cursor</span><span class="o">.</span><span class="n">fetch_next</span><span class="p">):</span>
</span><span class="line">            <span class="n">message</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">.</span><span class="n">next_object</span><span class="p">()</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&lt;li&gt;</span><span class="si">%s</span><span class="s">&lt;/li&gt;&#39;</span> <span class="o">%</span> <span class="n">message</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">])</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&lt;/ul&gt;&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">_on_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="n">error</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="n">error</span><span class="p">:</span>
</span><span class="line">            <span class="k">raise</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">HTTPError</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class="line">        <span class="k">elif</span> <span class="n">message</span><span class="p">:</span>
</span><span class="line">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">message</span><span class="p">:</span>
</span><span class="line">                <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&lt;li&gt;</span><span class="si">%s</span><span class="s">&lt;/li&gt;&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">])</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&lt;/ul&gt;&#39;</span><span class="p">)</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JustNowHandler</span><span class="p">(</span><span class="n">BaseHandler</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;i hope just now see you&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">parse_command_line</span><span class="p">()</span>
</span><span class="line">    <span class="n">app</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">(</span><span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
</span><span class="line">            <span class="p">(</span><span class="s">r&quot;/sleep&quot;</span><span class="p">,</span> <span class="n">SleepHandler</span><span class="p">),</span> <span class="p">(</span><span class="s">r&quot;/justnow&quot;</span><span class="p">,</span> <span class="n">JustNowHandler</span><span class="p">)])</span>
</span><span class="line">    <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class="line">    <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>一个同事提示为什么这个耗时的东西不能异步的丢给某工具去执行而不阻塞我的请求呢?好吧，我也想到了:celery，正好github有这个东西:<a href="https://github.com/mher/tornado-celery">tornado-celery</a></p>

<p>执行下面的程序首先你要安装rabbitmq和celery:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#!/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpserver</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.options</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.gen</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpclient</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tcelery</span><span class="o">,</span> <span class="nn">tasks</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>
</span><span class="line"><span class="n">define</span><span class="p">(</span><span class="s">&quot;port&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;run on the given port&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">tcelery</span><span class="o">.</span><span class="n">setup_nonblocking_producer</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="nd">@tornado.gen.coroutine</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="c"># tornado.gen.Task的参数是:要执行的函数, 参数</span>
</span><span class="line">        <span class="k">yield</span> <span class="n">tornado</span><span class="o">.</span><span class="n">gen</span><span class="o">.</span><span class="n">Task</span><span class="p">(</span><span class="n">tasks</span><span class="o">.</span><span class="n">sleep</span><span class="o">.</span><span class="n">apply_async</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;when i sleep 5s&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JustNowHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;i hope just now see you&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">parse_command_line</span><span class="p">()</span>
</span><span class="line">    <span class="n">app</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">(</span><span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
</span><span class="line">            <span class="p">(</span><span class="s">r&quot;/sleep&quot;</span><span class="p">,</span> <span class="n">SleepHandler</span><span class="p">),</span> <span class="p">(</span><span class="s">r&quot;/justnow&quot;</span><span class="p">,</span> <span class="n">JustNowHandler</span><span class="p">)])</span>
</span><span class="line">    <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class="line">    <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>task是celery的任务定义的文件，包含我们说的time.sleep的函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">Celery</span>
</span><span class="line">
</span><span class="line"><span class="n">celery</span> <span class="o">=</span> <span class="n">Celery</span><span class="p">(</span><span class="s">&quot;tasks&quot;</span><span class="p">,</span> <span class="n">broker</span><span class="o">=</span><span class="s">&quot;amqp://guest:guest@localhost:5672&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">celery</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">CELERY_RESULT_BACKEND</span> <span class="o">=</span> <span class="s">&quot;amqp&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nd">@celery.task</span>
</span><span class="line"><span class="k">def</span> <span class="nf">sleep</span><span class="p">(</span><span class="n">seconds</span><span class="p">):</span>
</span><span class="line">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">seconds</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">seconds</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">celery</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>然后启动celelry  worker(要不然你的任务怎么执行呢?肯定需要一个消费者取走):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="n">celery</span> <span class="o">-</span><span class="n">A</span> <span class="n">tasks</span> <span class="n">worker</span> <span class="o">--</span><span class="n">loglevel</span><span class="o">=</span><span class="n">info</span>
</span></pre></figure></notextile></div>

<p>但是这里的问题也可能很严重:我们的异步非阻塞依赖于celery,还是这个队列的长度,假如任务很多那么就需要等待,效率很低.有没有一种办法把我的同步阻塞函数变为异步(或者说被tornado的装饰器理解和识别)呢?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="c">#!/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpserver</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.options</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.httpclient</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.gen</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.concurrent</span> <span class="kn">import</span> <span class="n">run_on_executor</span>
</span><span class="line"><span class="c"># 这个并发库在python3自带在python2需要安装sudo pip install futures</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>
</span><span class="line"><span class="n">define</span><span class="p">(</span><span class="s">&quot;port&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;run on the given port&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="n">executor</span> <span class="o">=</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="nd">@tornado.gen.coroutine</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="c"># 假如你执行的异步会返回值被继续调用可以这样(只是为了演示),否则直接yield就行</span>
</span><span class="line">        <span class="n">res</span> <span class="o">=</span> <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">sleep</span><span class="p">()</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;when i sleep&quot;</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@run_on_executor</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">sleep</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">5</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JustNowHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;i hope just now see you&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">parse_command_line</span><span class="p">()</span>
</span><span class="line">    <span class="n">app</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">(</span><span class="n">handlers</span><span class="o">=</span><span class="p">[</span>
</span><span class="line">            <span class="p">(</span><span class="s">r&quot;/sleep&quot;</span><span class="p">,</span> <span class="n">SleepHandler</span><span class="p">),</span> <span class="p">(</span><span class="s">r&quot;/justnow&quot;</span><span class="p">,</span> <span class="n">JustNowHandler</span><span class="p">)])</span>
</span><span class="line">    <span class="n">http_server</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">httpserver</span><span class="o">.</span><span class="n">HTTPServer</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class="line">    <span class="n">http_server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class="line">    <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>

<p>但是有朋友留言和我说为什么在浏览器打开多个url请求还是会阻塞一个个的响应呢?</p>

<p>这个事浏览器自身实现的可能是缓存把,当请求的资源相同就会出现这个问题,可以使用多浏览器(多人)或者命令行下的curl登都不会有这个问题,还有个比较恶的解决方法:</p>

<p>给你的请求添加一些无用参数，比如: http://localhost:8000/sleep/?a=1 也可以是个时间戳</p>

<h5 id="blocking-tasks-in-tornadohttplbollainfoblog20130122blocking-tornado">2014.4.1更新,发现了2种新的写法,请参照<a href="http://lbolla.info/blog/2013/01/22/blocking-tornado">Blocking tasks in Tornado</a></h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><pre class="sh_python"><span class="line"><span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span><span class="p">,</span> <span class="n">wraps</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.ioloop</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tornado.web</span>
</span><span class="line">
</span><span class="line"><span class="kn">from</span> <span class="nn">tornado.options</span> <span class="kn">import</span> <span class="n">define</span><span class="p">,</span> <span class="n">options</span>
</span><span class="line"><span class="n">define</span><span class="p">(</span><span class="s">&quot;port&quot;</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">&quot;run on the given port&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">EXECUTOR</span> <span class="o">=</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">unblock</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="nd">@wraps</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">future</span><span class="p">):</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">())</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">        <span class="n">EXECUTOR</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span>
</span><span class="line">            <span class="n">partial</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">        <span class="p">)</span><span class="o">.</span><span class="n">add_done_callback</span><span class="p">(</span>
</span><span class="line">            <span class="k">lambda</span> <span class="n">future</span><span class="p">:</span> <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span>
</span><span class="line">                <span class="n">partial</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">future</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JustNowHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;i hope just now see you&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@unblock</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class="line">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Awake! </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SleepAsyncHandler</span><span class="p">(</span><span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">RequestHandler</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@tornado.web.asynchronous</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">future</span><span class="p">):</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">())</span>
</span><span class="line">            <span class="bp">self</span><span class="o">.</span><span class="n">finish</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">        <span class="n">EXECUTOR</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span>
</span><span class="line">            <span class="n">partial</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line">        <span class="p">)</span><span class="o">.</span><span class="n">add_done_callback</span><span class="p">(</span>
</span><span class="line">            <span class="k">lambda</span> <span class="n">future</span><span class="p">:</span> <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span>
</span><span class="line">                <span class="n">partial</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">future</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class="line">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Awake! </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">application</span> <span class="o">=</span> <span class="n">tornado</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">Application</span><span class="p">([</span>
</span><span class="line">    <span class="p">(</span><span class="s">r&quot;/justnow&quot;</span><span class="p">,</span> <span class="n">JustNowHandler</span><span class="p">),</span>
</span><span class="line">    <span class="p">(</span><span class="s">r&quot;/sleep/(\d+)&quot;</span><span class="p">,</span> <span class="n">SleepHandler</span><span class="p">),</span>
</span><span class="line">    <span class="p">(</span><span class="s">r&quot;/sleep_async/(\d+)&quot;</span><span class="p">,</span> <span class="n">SleepAsyncHandler</span><span class="p">),</span>
</span><span class="line"><span class="p">])</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class="line">   <span class="n">application</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class="line">   <span class="n">tornado</span><span class="o">.</span><span class="n">ioloop</span><span class="o">.</span><span class="n">IOLoop</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></pre></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
